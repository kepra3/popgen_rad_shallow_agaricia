dataType = "Diploid",
statistic = "a",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = 1e-3,
maximalDistance = 1e4,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
# run ibd
ibd("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt",
outputFile = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/results/moko.genepop.results.txt",
settingsFile = "",
dataType = "Diploid",
statistic = "a",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = 1e-3,
maximalDistance = 1e2,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
5e2
0.5e2
1.5e2
ibd("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt",
outputFile = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/results/moko.genepop.results.txt",
settingsFile = "",
dataType = "Diploid",
statistic = "a",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = 1e-3,
maximalDistance = 1.5e2,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
View(moko_gendata)
View(mat)
# run ibd
ibd("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt",
outputFile = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/results/moko.genepop.results.txt",
settingsFile = "",
dataType = "Diploid",
statistic = "e",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = 1e-3,
maximalDistance = 1.5e2,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
View(first_lines)
View(moko_gendata)
View(moko_gendata)
header <- paste(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, sep ="\t")
header
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- paste("Ind", "X", "Y", colnames(moko_gendata1)[3:30], sep = ",")
colnames(moko_gendata1)[3:30]
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = ","))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(, paste("Ind", "X", "Y", colnames(moko_gendata1)[3:30], collapse = ","))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- paste("Ind", "X", "Y", colnames(moko_gendata1)[3:30], collapse = ","))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- paste("Ind", "X", "Y", colnames(moko_gendata1)[3:30], collapse = ",")
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = ","), sep = ",")
View(moko_geodata)
View(moko_gendata)
mokogendata[,1]
moko_gendata[,1]
moko_gendata[,30]
View(moko_gendata)
rest_lines <- cbind(moko_gendata[,1], moko_gendata[,30], moko_gendata[,31], moko_gendata[,2:29])
View(rest_lines)
# Convert to Spagedi ####
# genotype matrix (very similar to genepop)
gen_lines <- cbind(moko_gendata[,1], moko_gendata[,30], moko_gendata[,31], moko_gendata[,2:29])
View(gen_lines)
# Convert to Spagedi ####
# genotype matrix (very similar to genepop)
gen_lines <- cbind(moko_gendata[,1], moko_gendata[,30], moko_gendata[,31], moko_gendata[,2:29])
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
header <- c(paste(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, sep ="\t"), rep("", ncol(gen_lines) - 1))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("-7", rep("", ncol(gen_lines)-1))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"),
sep = "\t"), rep("", ncol(gen_lines) - 1))
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, second_line, thirdline, gen_lines, end_line)
spagedi <- rbind(header, second_line, third_line, gen_lines, end_line)
View(spagedi)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
# header
header <- c(paste("// Spagedi file format"), format(Sys.time(), "%Y%m%d@%H%M"), rep("", mcol(gen_lines)- 1))
# header
header <- c(paste("// Spagedi file format"), format(Sys.time(), "%Y%m%d@%H%M"), rep("", ncol(gen_lines)- 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(paste(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, sep ="\t"), rep("", ncol(gen_lines) - 1))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("-7", rep("", ncol(gen_lines)-1))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"),
sep = "\t"), rep("", ncol(gen_lines) - 1))
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M"), rep("", ncol(gen_lines)- 1)))
header
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines)- 1))
header
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines)- 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(paste(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, sep ="\t"), rep("", ncol(gen_lines) - 1))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("-7", rep("", ncol(gen_lines)-1))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"),
sep = "\t"), rep("", ncol(gen_lines) - 1))
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
View(spagedi)
View(spagedi)
30-3
View(moko_gendata)
ncol(moko_gendata)
ncol(moko_gendata)-3
3:30
length(3:30)
View(gen_lines)
View(spagedi)
View(spagedi)
# Convert to Spagedi ####
# genotype matrix (very similar to genepop)
gen_lines <- cbind(moko_gendata[,1], moko_gendata[,30], moko_gendata[,31], moko_gendata[,2:29])
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines)- 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, rep("", ncol(gen_lines) - 7))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("-7", rep("", ncol(gen_lines)-1))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"),
sep = "\t"), rep("", ncol(gen_lines) - 1))
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, rep("", ncol(gen_lines) - 6))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"))
third_line
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", colnames(moko_gendata1)[3:30])
third_line
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
View(spagedi)
View(spagedi)
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines) - 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, rep("", ncol(gen_lines) - 6))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("7", "150", "300", "450", "600", "750", "900", "1050", rep("", ncol(gen_lines) - 8))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", colnames(moko_gendata1)[3:30])
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE, sep = "\t")
View(spagedi)
# Setting variables
setwd("~/Dropbox/agaricia_project_2019/shalo_ag/gen_project/2 - Population Structure/2d - Popgen stats/")
# Setting variables
setwd("~/Dropbox/agaricia_project_2019/shalo_ag/gen_project/popgen_rad_shallow_agaricia/E-intraspecific/data/")
# Cryptic taxa stats (without clones) =====
taxa <- "aa1"
missing.dat <- "20"
# Importing VCF and popfile =====
pop <- read.csv(paste0('pop_', taxa, ".txt"), header = FALSE, sep = "\t")
# Importing VCF and popfile =====
pop <- read.csv(paste0('pop_', taxa, ".txt"), header = FALSE, sep = "\t")
# Importing VCF and popfile =====
pop <- read.csv(paste0('pop_', taxa, "1div_nc.txt"), header = FALSE, sep = "\t")
colnames(pop) <- c("Individual", "Site")
# Importing VCF and popfile =====
pop <- read.csv(paste0('pop_', taxa, "_1div_nc.txt"), header = FALSE, sep = "\t")
View(pop)
colnames(pop) <- c("Individual", "Site")
# mislabels
pop$Site[pop$Individual == "KP0406_NA_NANA"] = "WP20"
pop$Site[pop$Individual == "KP0844_UN_NANA"] = "WP10"
pop$Site[pop$Individual == "KP0723_NA_NANA"] = "SB20"
View(pop)
#pop$Site[pop$Individual == "KP0673_UN_NANA"] = "SB20"
pop <- pop %>% separate(Site, into = c("Loc", "Depth"), sep = 2, remove = FALSE)
# Packages ####
library("vcfR")
library("adegenet")
library("hierfstat")
library("dplyr")
library("sjmisc")
library("pegas")
#pop$Site[pop$Individual == "KP0673_UN_NANA"] = "SB20"
pop <- pop %>% separate(Site, into = c("Loc", "Depth"), sep = 2, remove = FALSE)
library("vcfR")
library("adegenet")
library("dplyr")
library("tidyr")
library("hierfstat")
library("sjmisc")
library("pegas")
#pop$Site[pop$Individual == "KP0673_UN_NANA"] = "SB20"
pop <- pop %>% separate(Site, into = c("Loc", "Depth"), sep = 2, remove = FALSE)
pop$Site <- as.factor(pop$Site)
pop$Loc <- as.factor(pop$Loc)
pop$Depth <- as.factor(pop$Depth)
genind <- vcfR2genind(read.vcfR(paste0(taxa, "_1div_nc_", missing.dat, ".vcf")))
View(genind)
View(pop)
genind@pop <- pop$Loc
genlight <- vcfR2genlight(read.vcfR(paste0(taxa, "_1div_nc_", missing.dat, ".vcf")))
# Heterozygosity and diversity =====
sum <- summary(genind)
print(paste("Mean of observed Heterozygosity:", round(mean(sum$Hobs), 2)))
# Build a result table
results <- data.frame()
results$Ho <- round(mean(sum$Hobs), 2))
results$Ho <- round(mean(sum$Hobs), 2)
# Build a result table
results <- data.frame(Ho = NULL, HE = NULL)
# Build a result table
results <- data.frame(Taxa = taxa, Ho = NA, HE = NA)
View(results)
# Heirfstat ####
g_h <- genind2hierfstat(genind)
statistics <- as.data.frame(boot.vc(g_h[1], g_h[-1])$ci)
round(statistics$`Hobs`, 3)
round(statistics$`H-Total`, 3)
round(statistics$`F-pop/Total`, 3)
round(statistics$`F-Ind/Total`, 3)
round(statistics$`F-Ind/pop`, 3)
boot.ppfst(dat=g_h,nboot=100,quant=c(0.025,0.975))
basic.stats(g_h)
matFst <- genet.dist(genind, method = "WC84")
matFst
datFst <- as.matrix(matFst)
write.csv(datFst, paste0("../results/", taxa, "_", missing.dat, "_matFst.csv"), quote = FALSE)
write.csv(datFst, paste0("../results/fstat/", taxa, "_", missing.dat, "_matFst.csv"), quote = FALSE)
boot.ppfst(dat=g_h,nboot=100,quant=c(0.025,0.975))
round(statistics$`Hobs`, 3)
results$Ho <- round(statistics$`Hobs`, 3)
# Build a result table for fstatistics
results <- data.frame(Taxa = taxa,
HoL = NA, Ho = NA, HoU = NA,
HeL = NA, He = NA, HeU = NA,
fstL = NA, fst = NA, fstU = NA,
fitL = NA, fit = NA, fitU = NA,
fis = NA, fis = NA, fisU = NA)
# Heirfstat ####
g_h <- genind2hierfstat(genind)
statistics <- as.data.frame(boot.vc(g_h[1], g_h[-1])$ci)
results[,1:3] <- round(statistics$`Hobs`, 3)
# Build a result table for fstatistics
results <- data.frame(Taxa = taxa,
HoL = NA, Ho = NA, HoU = NA,
HeL = NA, He = NA, HeU = NA,
fstL = NA, fst = NA, fstU = NA,
fitL = NA, fit = NA, fitU = NA,
fis = NA, fis = NA, fisU = NA)
# Heirfstat ####
g_h <- genind2hierfstat(genind)
statistics <- as.data.frame(boot.vc(g_h[1], g_h[-1])$ci)
results[,2:4] <- round(statistics$`Hobs`, 3)
results[, 5:7] <- round(statistics$`H-Total`, 3)
results[, 8:10] <- round(statistics$`F-pop/Total`, 3)
results[, 11:13] <- round(statistics$`F-Ind/Total`, 3)
results[, 14:16] <- round(statistics$`F-Ind/pop`, 3)
View(results)
write.csv(results, paste0("../results/fstat/", taxa, "_", missing.dat, "_Fstatistics.csv"), quote = FALSE)
# Fstat between locations
matFst <- genet.dist(genind, method = "WC84")
print(matFst)
datFst <- as.matrix(matFst)
boot.ppfst(dat=g_h,nboot=100,quant=c(0.025,0.975))
boot.ppfis(dat=g_h,nboot=100,quant=c(0.025,0.975))
write.csv(datFst, paste0("../results/fstat/", taxa, "_", missing.dat, "_LocationFst.csv"), quote = FALSE)
# Individual heterozygosity scores ======
mat <- as.matrix(genlight)
dat <- as.data.frame(mat)
hetero_loci <- row_count(dat, count = 1, var = "het", append = TRUE)
hetero_loci <- row_count(hetero_loci, count = NA, var = "missdat", append = TRUE)
for (i in 1:nrow(hetero_loci)) {
hetero_loci$num_loci[i] <- genlight$n.loc - hetero_loci$missdat[i]
hetero_loci$het_frac[i] <- hetero_loci$het[i]/hetero_loci$num_loci[i]
}
indiv_het <- dplyr::select(hetero_loci, het, het_frac, num_loci)
high_het <- indiv_het[indiv_het$het_frac > 0.05,]
low_het <- indiv_het[indiv_het$het_frac < 0.05,]
plot(indiv_het$het_frac)
write.csv(indiv_het, file = paste0("../results/fstat/", taxa, "_", missing.dat, "_indiv_het.csv"), quote = FALSE)
setwd("~/Dropbox/agaricia_project_2019/shalo_ag/gen_project/popgen_rad_shallow_agaricia/D-spatial_coordinates/scripts/")
# Set distances #
# Packages
library(tidyverse)
# Functions
clean_df <- function(data) {
data <- data %>% separate(X, into = c("Sample", "Sp", "Site"), sep = "_", remove = FALSE) %>%
dplyr::select(X, Site, x, y, z)
columns <- c("Individual", "Site", "x", "y", "z")
colnames(data) <- columns
return(data)
}
standardise_plot_dist <- function(metadata) {
for (site in c("WP", "CA", "SB")) {
for (depth in c("05", "10", "20")) {
metadata$x[metadata$Site == paste0(site, depth)] <- metadata$x[metadata$Site == paste0(site, depth)] + abs(min(metadata$x[metadata$Site == paste0(site, depth)]))
metadata$y[metadata$Site == paste0(site, depth)] <- metadata$y[metadata$Site == paste0(site, depth)] + abs(min(metadata$y[metadata$Site == paste0(site, depth)]))
metadata$z[metadata$Site == paste0(site, depth)] <- metadata$z[metadata$Site == paste0(site, depth)] + (-as.numeric(depth) - mean(metadata$z[metadata$Site == paste0(site, depth)]))
}}
for (depth in c("12", "20")) {
site = "SQ"
metadata$x[metadata$Site == paste0(site, depth)] <- metadata$x[metadata$Site == paste0(site, depth)] + abs(min(metadata$x[metadata$Site == paste0(site, depth)]))
metadata$y[metadata$Site == paste0(site, depth)] <- metadata$y[metadata$Site == paste0(site, depth)] + abs(min(metadata$y[metadata$Site == paste0(site, depth)]))
metadata$z[metadata$Site == paste0(site, depth)] <- metadata$z[metadata$Site == paste0(site, depth)] + (-as.numeric(depth) - mean(metadata$z[metadata$Site == paste0(site, depth)]))
}
return(metadata)
}
annotation_file <- "all_annotations_X_DEPTH_parallel"
# Read data
metadata <- read.csv(paste0("../results/", annotation_file, ".txt", sep = "\t")
# Read data
metadata <- read.csv(paste0("../results/", annotation_file, ".txt"), sep = "\t")
# Read data
metadata <- read.csv(paste0("../results/", annotation_file, ".txt"), sep = "\t")
View(metadata)
# Read data
metadata <- read.csv(paste0("../results/", annotation_file, ".txt"), sep = ",")
View(metadata)
metadata <- clean_df(metadata)
View(metadata)
metadata <- na.omit(metadata)
metadata <- standardise_plot_dist(metadata)
View(metadata)
View(metadata)
metadata <- metadata %>% separate(Site, into = c("Loc", "Depth"), sep = 2, remove = FALSE)
View(metadata)
metadata$Depth[metadata$Depth == "12"] = "10"
metadata$Site[metadata$Site == "SQ12"] = "SQ10"
# Standardise distances  ==================================================
# distances from https://latlongdata.com/distance-calculator/ the Haversine formula
# distance between WP and CA
dist_CA <- 17828
# distance between WP and SB
dist_SB <- 31509
# distance between WP and SQ
dist_SQ <- 42880
#  For all dataset ========================================================
## Add distances b/w depths & sites #####
dist_5_10 <- 30
# 1 - 6 cattle tags
SBdist_10_20 <- sum(c(13.678, 14.800, 14.777, 15.191, 17.111, 17.083))/6
WPdist_10_20 <- sum(c(21.12, 19.27, 18.45,18.65, 18.85, 16.88))/6
dist_10_20 <- sum(SBdist_10_20, WPdist_10_20)/2
for (depth in c("05", "10", "20")) {
metadata$x[metadata$Site == paste0("SB", depth)] <- metadata$x[metadata$Site == paste0("SB", depth)] + dist_SB
metadata$x[metadata$Site == paste0("CA", depth)] <- metadata$x[metadata$Site == paste0("CA", depth)] + dist_CA
if (depth != "05") {
metadata$x[metadata$Site == paste0("SQ", depth)] <- metadata$x[metadata$Site == paste0("SQ", depth)] + dist_SQ
}}
# Depth distances
metadata$y[metadata$Depth == "10"] = metadata$y[metadata$Depth == "10"] - dist_5_10
metadata$y[metadata$Site == "WP20"] = metadata$y[metadata$Site == "WP20"] - dist_5_10 - WPdist_10_20
metadata$y[metadata$Site == "SB20"] = metadata$y[metadata$Site == "SB20"] - dist_5_10 - SBdist_10_20
metadata$y[metadata$Site == "CA20"] = metadata$y[metadata$Site == "CA20"] - dist_5_10 - dist_10_20
metadata$y[metadata$Site == "SQ20"] = metadata$y[metadata$Site == "SQ20"] - dist_5_10 - dist_10_20
View(metadata)
write.csv(metadata, file = paste0("../results/", annotation_file, "_XYZ_adjusted.txt"), row.names = FALSE, quote = FALSE)
# Packages
library(tidyverse)
# Functions
clean_df <- function(data) {
data <- data %>% separate(X, into = c("Sample", "Sp", "Site"), sep = "_", remove = FALSE) %>%
dplyr::select(X, Site, x, y, z)
columns <- c("Individual", "Site", "x", "y", "z")
colnames(data) <- columns
return(data)
}
standardise_plot_dist <- function(metadata) {
for (site in c("WP", "CA", "SB")) {
for (depth in c("05", "10", "20")) {
metadata$x[metadata$Site == paste0(site, depth)] <- metadata$x[metadata$Site == paste0(site, depth)] + abs(min(metadata$x[metadata$Site == paste0(site, depth)]))
metadata$y[metadata$Site == paste0(site, depth)] <- metadata$y[metadata$Site == paste0(site, depth)] + abs(min(metadata$y[metadata$Site == paste0(site, depth)]))
metadata$z[metadata$Site == paste0(site, depth)] <- metadata$z[metadata$Site == paste0(site, depth)] + (-as.numeric(depth) - mean(metadata$z[metadata$Site == paste0(site, depth)]))
}}
for (depth in c("12", "20")) {
site = "SQ"
metadata$x[metadata$Site == paste0(site, depth)] <- metadata$x[metadata$Site == paste0(site, depth)] + abs(min(metadata$x[metadata$Site == paste0(site, depth)]))
metadata$y[metadata$Site == paste0(site, depth)] <- metadata$y[metadata$Site == paste0(site, depth)] + abs(min(metadata$y[metadata$Site == paste0(site, depth)]))
metadata$z[metadata$Site == paste0(site, depth)] <- metadata$z[metadata$Site == paste0(site, depth)] + (-as.numeric(depth) - mean(metadata$z[metadata$Site == paste0(site, depth)]))
}
return(metadata)
}
# Arguments
args <- commandArgs(TRUE)
annotation_file <- args[1]
annotation_file <- "all_annotations_X_HORIZ_parallel"
# Read data
metadata <- read.csv(paste0("../results/", annotation_file, ".txt"), sep = ",")
# Packages
library(tidyverse)
# Functions
clean_df <- function(data) {
data <- data %>% separate(X, into = c("Sample", "Sp", "Site"), sep = "_", remove = FALSE) %>%
dplyr::select(X, Site, x, y, z)
columns <- c("Individual", "Site", "x", "y", "z")
colnames(data) <- columns
return(data)
}
standardise_plot_dist <- function(metadata) {
for (site in c("WP", "CA", "SB")) {
for (depth in c("05", "10", "20")) {
metadata$x[metadata$Site == paste0(site, depth)] <- metadata$x[metadata$Site == paste0(site, depth)] + abs(min(metadata$x[metadata$Site == paste0(site, depth)]))
metadata$y[metadata$Site == paste0(site, depth)] <- metadata$y[metadata$Site == paste0(site, depth)] + abs(min(metadata$y[metadata$Site == paste0(site, depth)]))
metadata$z[metadata$Site == paste0(site, depth)] <- metadata$z[metadata$Site == paste0(site, depth)] + (-as.numeric(depth) - mean(metadata$z[metadata$Site == paste0(site, depth)]))
}}
for (depth in c("12", "20")) {
site = "SQ"
metadata$x[metadata$Site == paste0(site, depth)] <- metadata$x[metadata$Site == paste0(site, depth)] + abs(min(metadata$x[metadata$Site == paste0(site, depth)]))
metadata$y[metadata$Site == paste0(site, depth)] <- metadata$y[metadata$Site == paste0(site, depth)] + abs(min(metadata$y[metadata$Site == paste0(site, depth)]))
metadata$z[metadata$Site == paste0(site, depth)] <- metadata$z[metadata$Site == paste0(site, depth)] + (-as.numeric(depth) - mean(metadata$z[metadata$Site == paste0(site, depth)]))
}
return(metadata)
}
# Arguments
args <- commandArgs(TRUE)
annotation_file <- args[1]
annotation_file <- "all_annotations_X_HORIZ_parallel"
# Read data
metadata <- read.csv(paste0("../results/", annotation_file, ".txt"), sep = ",")
View(metadata)
metadata <- clean_df(metadata)
metadata <- na.omit(metadata)
metadata <- standardise_plot_dist(metadata)
View(metadata)
metadata <- metadata %>% separate(Site, into = c("Loc", "Depth"), sep = 2, remove = FALSE)
metadata$Depth[metadata$Depth == "12"] = "10"
metadata$Site[metadata$Site == "SQ12"] = "SQ10"
# Standardise distances  ==================================================
# distances from https://latlongdata.com/distance-calculator/ the Haversine formula
# distance between WP and CA
dist_CA <- 17828
# distance between WP and SB
dist_SB <- 31509
# distance between WP and SQ
dist_SQ <- 42880
#  For all dataset ========================================================
## Add distances b/w depths & sites #####
dist_5_10 <- 30
# 1 - 6 cattle tags
SBdist_10_20 <- sum(c(13.678, 14.800, 14.777, 15.191, 17.111, 17.083))/6
WPdist_10_20 <- sum(c(21.12, 19.27, 18.45,18.65, 18.85, 16.88))/6
dist_10_20 <- sum(SBdist_10_20, WPdist_10_20)/2
for (depth in c("05", "10", "20")) {
metadata$x[metadata$Site == paste0("SB", depth)] <- metadata$x[metadata$Site == paste0("SB", depth)] + dist_SB
metadata$x[metadata$Site == paste0("CA", depth)] <- metadata$x[metadata$Site == paste0("CA", depth)] + dist_CA
if (depth != "05") {
metadata$x[metadata$Site == paste0("SQ", depth)] <- metadata$x[metadata$Site == paste0("SQ", depth)] + dist_SQ
}}
# Depth distances
metadata$y[metadata$Depth == "10"] = metadata$y[metadata$Depth == "10"] - dist_5_10
metadata$y[metadata$Site == "WP20"] = metadata$y[metadata$Site == "WP20"] - dist_5_10 - WPdist_10_20
metadata$y[metadata$Site == "SB20"] = metadata$y[metadata$Site == "SB20"] - dist_5_10 - SBdist_10_20
metadata$y[metadata$Site == "CA20"] = metadata$y[metadata$Site == "CA20"] - dist_5_10 - dist_10_20
metadata$y[metadata$Site == "SQ20"] = metadata$y[metadata$Site == "SQ20"] - dist_5_10 - dist_10_20
write.csv(metadata, file = paste0("../results/", annotation_file, "_XYZ_adjusted.txt"), row.names = FALSE, quote = FALSE)
