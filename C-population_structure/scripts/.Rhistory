mat <- mat[rep(1:nrow(mat), 1, each = 2), ]
# Replace all duplicates with blank cells
mat[c(seq(2, dim(mat)[1], by = 2)), ] <- ""
mat[c(seq(2, dim(mat)[1] - 1, by = 2)), 1] <- "Pop"
mat <- mat[-nrow(mat),]
# Genepop header
file_date <- format(Sys.time(), "%Y%m%d@%H%M") # date and time
header <- c(paste("Genepop file format", file_date), rep("", ncol(mat) - 1))
loc_names <- c(paste(colnames(moko_gendata1)[3:30], collapse = ","), rep("", ncol(mat) - 1))
popline <- c("Pop", rep("", ncol(mat) - 1))
first_lines <- rbind(header, loc_names, popline)
mat <- rbind(first_lines, mat)
write.table(mat, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
# run ibd
ibd("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt",
outputFile = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/results/moko.genepop.results.txt",
settingsFile = "",
dataType = "Diploid",
statistic = "a",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = 1e-3,
maximalDistance = 1e3,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
# run ibd
ibd("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt",
outputFile = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/results/moko.genepop.results.txt",
settingsFile = "",
dataType = "Diploid",
statistic = "a",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = 1e-3,
maximalDistance = 1e2,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
# run ibd
ibd("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt",
outputFile = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/results/moko.genepop.results.txt",
settingsFile = "",
dataType = "Diploid",
statistic = "a",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = 1e-3,
maximalDistance = 1e1,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
# run ibd
ibd("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt",
outputFile = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/results/moko.genepop.results.txt",
settingsFile = "",
dataType = "Diploid",
statistic = "a",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = 1e-3,
maximalDistance = 1e0,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
View(moko_gendata)
View(mat)
moko_geodata$Lon - origin[2]
(moko_geodata$Lon - origin[2]) * pi/180
(moko_geodata$Lon - origin[2]) * pi/180 * (pi*6371/180)
View(moko_geodata)
# substract origin from all coordinates, convert to radians then convert to distances (km) then to metres
moko_geodata$x <- (moko_geodata$Lon - origin[2]) * (pi*6371/180) * 1000
moko_geodata$y <- (moko_geodata$Lat - origin[1]) * (pi*6371/180*cos(origin[1]*pi/180)) * 1000
View(moko_geodata)
# substract origin from all coordinates, convert to radians then convert to distances (km) then to metres
moko_geodata$x <- (moko_geodata$Lon - origin[2]) * (pi*6371/180*cos(origin[1]*pi/180)) * 1000
moko_geodata$y <- (moko_geodata$Lat - origin[1]) (pi*6371/180) * 1000
View(moko_geodata)
# Packages
library(tidyverse)
library(readxl)
library(genepop)
# Import data
moko_gendata <- read_excel("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko_gendata.xlsx")
moko_geodata <- read_excel("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko_geodata.xlsx")
# Format gendata ####
str(moko_gendata)
# merge allele 1 and allele 2 into same cell
evens <- seq(4, 58, 2)
odds <- seq(3, 58, 2)
moko_gendata1 <- moko_gendata[,c(1,2, odds)]
moko_gendata2 <- moko_gendata[,c(1,2, evens)]
moko_gendata <- data.frame(matrix(nrow = nrow(moko_gendata1), ncol = ncol(moko_gendata1)-2))
for(i in 1:nrow(moko_gendata1)) {
for(j in 3:ncol(moko_gendata1))
moko_gendata[i, j] <- paste0(moko_gendata1[i, j], moko_gendata2[i, j])
}
moko_gendata[,c(1,2)] <- moko_gendata1[,c(1,2)]
# Format geodata ####
str(moko_geodata)
ggplot(data = moko_geodata, aes(x = Lon, y = Lat)) + geom_point()
# create new Cartesian coordinates from spherical a new origin and convert to metres
lambda0 <- 124.25
theta0 <- 24.35
origin <- c(theta0, lambda0)
# substract origin from all coordinates, convert to radians then convert to distances (km) then to metres
moko_geodata$x <- (moko_geodata$Lon - origin[2]) * (pi*6371/180*cos(origin[1]*pi/180)) * 1000
moko_geodata$y <- (moko_geodata$Lat - origin[1]) (pi*6371/180) * 1000
# Merge gendata with geodata ####
moko_gendata <- separate(moko_gendata, col = X1, into = c("int1", "int2"), sep = "_")
moko_gendata$x <- moko_geodata$x[match(moko_gendata$int1, moko_geodata$Site)]
moko_gendata$y <- moko_geodata$y[match(moko_gendata$int1, moko_geodata$Site)]
moko_gendata <- unite(moko_gendata, "Sample", int1:int2, sep = "_")
moko_gendata <- moko_gendata[,-2]
# Convert 0 to 01 and 1 to 02 and NA's to 0000
mat <- as.matrix(moko_gendata[,2:29])
# convert to nucleotides
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "1", replacement = "A")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "2", replacement = "T")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "3", replacement = "G")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "4", replacement = "C")
# convert to genepop SNPs (e.g., allele1 or allele2)
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "0", replacement = "00")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "A", replacement = "01")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "T", replacement = "02")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "G", replacement = "01")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "C", replacement = "02")
# Add the distances and individual name, and make distances positive
xy <- paste(moko_gendata$x, moko_gendata$y, paste0(moko_gendata$Sample, ","))
mat <- cbind(xy, mat)
# Insert a Pop row between each population
# Double all rows
mat <- mat[rep(1:nrow(mat), 1, each = 2), ]
# Replace all duplicates with blank cells
mat[c(seq(2, dim(mat)[1], by = 2)), ] <- ""
mat[c(seq(2, dim(mat)[1] - 1, by = 2)), 1] <- "Pop"
mat <- mat[-nrow(mat),]
# Genepop header
file_date <- format(Sys.time(), "%Y%m%d@%H%M") # date and time
header <- c(paste("Genepop file format", file_date), rep("", ncol(mat) - 1))
loc_names <- c(paste(colnames(moko_gendata1)[3:30], collapse = ","), rep("", ncol(mat) - 1))
popline <- c("Pop", rep("", ncol(mat) - 1))
first_lines <- rbind(header, loc_names, popline)
mat <- rbind(first_lines, mat)
write.table(mat, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
# run ibd
ibd("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt",
outputFile = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/results/moko.genepop.results.txt",
settingsFile = "",
dataType = "Diploid",
statistic = "a",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = 1e-3,
maximalDistance = 1e0,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
1e6
1e3
1e4
# run ibd
ibd("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt",
outputFile = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/results/moko.genepop.results.txt",
settingsFile = "",
dataType = "Diploid",
statistic = "a",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = 1e-3,
maximalDistance = 1e4,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
# Title: reformatting files
# Author: Katharine Prata
# Packages
library(tidyverse)
library(readxl)
library(genepop)
# Import data
moko_gendata <- read_excel("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko_gendata.xlsx")
moko_geodata <- read_excel("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko_geodata.xlsx")
# Format gendata ####
str(moko_gendata)
# merge allele 1 and allele 2 into same cell
evens <- seq(4, 58, 2)
odds <- seq(3, 58, 2)
moko_gendata1 <- moko_gendata[,c(1,2, odds)]
moko_gendata2 <- moko_gendata[,c(1,2, evens)]
moko_gendata <- data.frame(matrix(nrow = nrow(moko_gendata1), ncol = ncol(moko_gendata1)-2))
for(i in 1:nrow(moko_gendata1)) {
for(j in 3:ncol(moko_gendata1))
moko_gendata[i, j] <- paste0(moko_gendata1[i, j], moko_gendata2[i, j])
}
moko_gendata[,c(1,2)] <- moko_gendata1[,c(1,2)]
# Format geodata ####
str(moko_geodata)
ggplot(data = moko_geodata, aes(x = Lon, y = Lat)) + geom_point()
# create new Cartesian coordinates from spherical a new origin and convert to metres
lambda0 <- 124.25
theta0 <- 24.35
origin <- c(theta0, lambda0)
# substract origin from all coordinates, convert to radians then convert to distances (km) then to metres
moko_geodata$x <- (moko_geodata$Lon - origin[2]) * (pi*6371/180*cos(origin[1]*pi/180)) * 1000
moko_geodata$y <- (moko_geodata$Lat - origin[1]) (pi*6371/180) * 1000
# Packages
library(tidyverse)
library(readxl)
library(genepop)
# Import data
moko_gendata <- read_excel("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko_gendata.xlsx")
moko_geodata <- read_excel("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko_geodata.xlsx")
# Format gendata ####
str(moko_gendata)
# merge allele 1 and allele 2 into same cell
evens <- seq(4, 58, 2)
odds <- seq(3, 58, 2)
moko_gendata1 <- moko_gendata[,c(1,2, odds)]
moko_gendata2 <- moko_gendata[,c(1,2, evens)]
moko_gendata <- data.frame(matrix(nrow = nrow(moko_gendata1), ncol = ncol(moko_gendata1)-2))
for(i in 1:nrow(moko_gendata1)) {
for(j in 3:ncol(moko_gendata1))
moko_gendata[i, j] <- paste0(moko_gendata1[i, j], moko_gendata2[i, j])
}
moko_gendata[,c(1,2)] <- moko_gendata1[,c(1,2)]
# Format geodata ####
str(moko_geodata)
ggplot(data = moko_geodata, aes(x = Lon, y = Lat)) + geom_point()
# create new Cartesian coordinates from spherical a new origin and convert to metres
lambda0 <- 124.25
theta0 <- 24.35
origin <- c(theta0, lambda0)
# substract origin from all coordinates, convert to radians then convert to distances (km) then to metres
moko_geodata$x <- (moko_geodata$Lon - origin[2]) * (pi*6371/180*cos(origin[1]*pi/180)) * 1000
moko_geodata$y <- (moko_geodata$Lat - origin[1]) (pi*6371/180) * 1000
moko_geodata$y <- (moko_geodata$Lat - origin[1]) * (pi*6371/180) * 1000
# Merge gendata with geodata ####
moko_gendata <- separate(moko_gendata, col = X1, into = c("int1", "int2"), sep = "_")
moko_gendata$x <- moko_geodata$x[match(moko_gendata$int1, moko_geodata$Site)]
moko_gendata$y <- moko_geodata$y[match(moko_gendata$int1, moko_geodata$Site)]
moko_gendata <- unite(moko_gendata, "Sample", int1:int2, sep = "_")
moko_gendata <- moko_gendata[,-2]
# Convert 0 to 01 and 1 to 02 and NA's to 0000
mat <- as.matrix(moko_gendata[,2:29])
# convert to nucleotides
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "1", replacement = "A")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "2", replacement = "T")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "3", replacement = "G")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "4", replacement = "C")
# convert to genepop SNPs (e.g., allele1 or allele2)
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "0", replacement = "00")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "A", replacement = "01")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "T", replacement = "02")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "G", replacement = "01")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "C", replacement = "02")
# Add the distances and individual name, and make distances positive
xy <- paste(moko_gendata$x, moko_gendata$y, paste0(moko_gendata$Sample, ","))
mat <- cbind(xy, mat)
# Insert a Pop row between each population
# Double all rows
mat <- mat[rep(1:nrow(mat), 1, each = 2), ]
# Replace all duplicates with blank cells
mat[c(seq(2, dim(mat)[1], by = 2)), ] <- ""
mat[c(seq(2, dim(mat)[1] - 1, by = 2)), 1] <- "Pop"
mat <- mat[-nrow(mat),]
# Genepop header
file_date <- format(Sys.time(), "%Y%m%d@%H%M") # date and time
header <- c(paste("Genepop file format", file_date), rep("", ncol(mat) - 1))
loc_names <- c(paste(colnames(moko_gendata1)[3:30], collapse = ","), rep("", ncol(mat) - 1))
popline <- c("Pop", rep("", ncol(mat) - 1))
first_lines <- rbind(header, loc_names, popline)
mat <- rbind(first_lines, mat)
write.table(mat, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
View(mat)
# run ibd
ibd("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt",
outputFile = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/results/moko.genepop.results.txt",
settingsFile = "",
dataType = "Diploid",
statistic = "a",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = 1e-3,
maximalDistance = 1e4,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
# run ibd
ibd("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt",
outputFile = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/results/moko.genepop.results.txt",
settingsFile = "",
dataType = "Diploid",
statistic = "a",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = 1e-3,
maximalDistance = 1e2,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
5e2
0.5e2
1.5e2
ibd("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt",
outputFile = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/results/moko.genepop.results.txt",
settingsFile = "",
dataType = "Diploid",
statistic = "a",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = 1e-3,
maximalDistance = 1.5e2,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
View(moko_gendata)
View(mat)
# run ibd
ibd("Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.genepop.txt",
outputFile = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/results/moko.genepop.results.txt",
settingsFile = "",
dataType = "Diploid",
statistic = "e",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = 1e-3,
maximalDistance = 1.5e2,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
View(first_lines)
View(moko_gendata)
View(moko_gendata)
header <- paste(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, sep ="\t")
header
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- paste("Ind", "X", "Y", colnames(moko_gendata1)[3:30], sep = ",")
colnames(moko_gendata1)[3:30]
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = ","))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(, paste("Ind", "X", "Y", colnames(moko_gendata1)[3:30], collapse = ","))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- paste("Ind", "X", "Y", colnames(moko_gendata1)[3:30], collapse = ","))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- paste("Ind", "X", "Y", colnames(moko_gendata1)[3:30], collapse = ",")
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = ","), sep = ",")
View(moko_geodata)
View(moko_gendata)
mokogendata[,1]
moko_gendata[,1]
moko_gendata[,30]
View(moko_gendata)
rest_lines <- cbind(moko_gendata[,1], moko_gendata[,30], moko_gendata[,31], moko_gendata[,2:29])
View(rest_lines)
# Convert to Spagedi ####
# genotype matrix (very similar to genepop)
gen_lines <- cbind(moko_gendata[,1], moko_gendata[,30], moko_gendata[,31], moko_gendata[,2:29])
View(gen_lines)
# Convert to Spagedi ####
# genotype matrix (very similar to genepop)
gen_lines <- cbind(moko_gendata[,1], moko_gendata[,30], moko_gendata[,31], moko_gendata[,2:29])
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
header <- c(paste(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, sep ="\t"), rep("", ncol(gen_lines) - 1))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("-7", rep("", ncol(gen_lines)-1))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"),
sep = "\t"), rep("", ncol(gen_lines) - 1))
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, second_line, thirdline, gen_lines, end_line)
spagedi <- rbind(header, second_line, third_line, gen_lines, end_line)
View(spagedi)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
# header
header <- c(paste("// Spagedi file format"), format(Sys.time(), "%Y%m%d@%H%M"), rep("", mcol(gen_lines)- 1))
# header
header <- c(paste("// Spagedi file format"), format(Sys.time(), "%Y%m%d@%H%M"), rep("", ncol(gen_lines)- 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(paste(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, sep ="\t"), rep("", ncol(gen_lines) - 1))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("-7", rep("", ncol(gen_lines)-1))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"),
sep = "\t"), rep("", ncol(gen_lines) - 1))
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M"), rep("", ncol(gen_lines)- 1)))
header
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines)- 1))
header
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines)- 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(paste(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, sep ="\t"), rep("", ncol(gen_lines) - 1))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("-7", rep("", ncol(gen_lines)-1))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"),
sep = "\t"), rep("", ncol(gen_lines) - 1))
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
View(spagedi)
View(spagedi)
30-3
View(moko_gendata)
ncol(moko_gendata)
ncol(moko_gendata)-3
3:30
length(3:30)
View(gen_lines)
View(spagedi)
View(spagedi)
# Convert to Spagedi ####
# genotype matrix (very similar to genepop)
gen_lines <- cbind(moko_gendata[,1], moko_gendata[,30], moko_gendata[,31], moko_gendata[,2:29])
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines)- 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, rep("", ncol(gen_lines) - 7))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("-7", rep("", ncol(gen_lines)-1))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"),
sep = "\t"), rep("", ncol(gen_lines) - 1))
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, rep("", ncol(gen_lines) - 6))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"))
third_line
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", colnames(moko_gendata1)[3:30])
third_line
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
View(spagedi)
View(spagedi)
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines) - 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, rep("", ncol(gen_lines) - 6))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("7", "150", "300", "450", "600", "750", "900", "1050", rep("", ncol(gen_lines) - 8))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", colnames(moko_gendata1)[3:30])
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE, sep = "\t")
View(spagedi)
0.000000000000001
setwd("~/Dropbox/agaricia_project_2019/shalo_ag/gen_project/popgen_rad_shallow_agaricia/")
setwd("~/Dropbox/agaricia_project_2019/shalo_ag/gen_project/popgen_rad_shallow_agaricia/C-population_structure/scripts/")
library(ggplot2)
citation("ggplot2")
library(stringr)
citation("stringr")
library(ggtree)
citation("tidyverse")
library(treeio)
library(ggstance)
citation("ggstance")
library(RColorBrewer)
citation("RColorBrewer")
library(phytools)
citation("phytools")
citation("ape")
library(ggplotify)
citation("ggplotify")
