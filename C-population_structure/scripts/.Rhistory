colnames(pop) <- c("Individual","Population")
pop  <- pop %>%
separate(Population, sep = "_", into = c("Species","Site"), remove = FALSE) %>%
separate(Site, sep = 2, into = c("Loc","Depth"), remove = FALSE)
pop <- pop %>%
unite(Site, Loc, Depth, sep = "", remove = FALSE) %>%
unite(Population, Species, Site, remove = FALSE)
} else {
colnames(pop) <- c("Individual","Site")
pop <- pop %>%
separate(Site, sep = 2, into = c("Loc", "Depth"), remove = FALSE)
}
pop$Depth[pop$Depth == "05"] = "5"
# PCA =============================
pca <- glPca(GENLIGHT, nf = nf)
n.loc <- GENLIGHT$n.loc
eig <- pca$eig
write.csv(eig, file = paste0(PATH, "_eig.csv"), quote = FALSE, row.names = FALSE)
pca_info <- sort_pca(pca, pop, nf)
title <- paste0(DATA_PARAMS[4],"% missing data")
clusters <- c("Clust1")
# Using PCA scores and fixing mislabelled samples ####
if (DATA_PARAMS[1] == "all-aga") {
pca_info$Species[pca_info$Species == "AC"] = "AA"
pca_info$Species[pca_info$Species == "LM"] = "AL"
pca_info$Species[pca_info$Species == "HU"] = "AH"
pca_info$Species[pca_info$Species == "L1"] = "AL"
pca_info$Species[pca_info$Species == "L2"] = "AL"
pca_info$Species[pca_info$Species == "G1"] = "AG"
pca_info$Species[pca_info$Species == "G2"] = "AG"
pca_info$Depth[pca_info$Individual == "KP0406_NA_NANA"] = "20"
pca_info$Loc[pca_info$Individual == "KP0406_NA_NANA"] = "WP"
pca_info$Depth[pca_info$Individual == "KP0673_NA_NANA"] = "20"
pca_info$Loc[pca_info$Individual == "KP0673_NA_NANA"] = "SB"
pca_info$Loc[pca_info$Individual == "KP0673_NA_NANA"] = "WP"
pca_info$Depth[pca_info$Individual == "KP0844_UN_NANA"] = "10"
pca_info$Loc[pca_info$Individual == "KP0844_UN_NANA"] = "WP"
pca_info$Species[pca_info$Individual == "KP0844_UN_NANA"] = "AA"
pca_info$Depth[pca_info$Individual == "KP0723_NA_NANA"] = "20"
pca_info$Loc[pca_info$Individual == "KP0723_NA_NANA"] = "SB"
pca_info$Species[pca_info$Individual == "KP0723_NA_NANA"] = "AL"
pca_info$Species[pca_info$Individual == "KP1036_UN_CA10"] = "AH"
pca_info$Species[pca_info$Individual == "KP1153_UN_CA20"] = "AH"
pca_info$Species[pca_info$Individual == "KP1159_UN_CA20"] = "AH"
pca_info$Species[pca_info$Individual == "KP1156_UN_CA20"] = "AA"
pca_info$Species[pca_info$Individual == "KP1160_UN_CA20"] = "AL"
pca_info$Loc[pca_info$Loc == "CK"] = "WP"
pca_info$Loc[pca_info$Loc == "CS"] = "SQ"
pca_info$Species[pca_info$Species == "CA"] = "AA"
# mislabels agaricites, humilis, lamarcki
mislabels_AA = c("KP1139_LM_CA20", "KP0361_LM_WP20", "KP0349_LM_WP20","KP0611_LM_SB20",
"KP0399_LM_WP20", "KP1146_LM_CA20", "KP0109_LM_SB10", "KP0583_LM_WP20",
"KP0244_LM_SQ20", "KP0565_LM_WP20", "KP0406_NA_NANA", "KP0673_NA_NANA")
write.csv(mislabels_AA, file = "../data/mislabels_AA.csv")
for (a in 1:length(mislabels_AA)) {
pca_info$Species[pca_info$Individual == mislabels_AA[a]] = "AA"}
mislabels_AH = c("KP0639_LM_SB20", "KP0899_LM_WP10")
write.csv(mislabels_AH, file = "../data/mislabels_AH.csv")
for (h in 1:length(mislabels_AH)) {
pca_info$Species[pca_info$Individual == mislabels_AH[h]] = "AH"}
mislabels_AL = c("KP1124_AC_CA20", "KP0557_AC_WP20", "KP0203_AC_SQ12", "KP1095_HU_CA20",
"KP0186_AC_SQ12", "KP0851_AC_WP10", "KP0605_AC_SB20", "KP0609_AC_SB20",
"KP0096_AC_SB10", "KP0765_AC_WP10", "KP0192_AC_SQ12", "KY0578_AC_WP20",
"KP0671_AC_SB20", "KP0108_AC_SB10")
write.csv(mislabels_AL, file = "../data/mislabels_AL.csv")
for (l in 1:length(mislabels_AL)) {
pca_info$Species[pca_info$Individual == mislabels_AL[l]] = "AL"}
pca_info$Species <- as.factor(pca_info$Species)
pca_info$Depth[pca_info$Depth == "12"] = "10-12"
pca_info$Depth[pca_info$Depth == "10"] = "10-12"
} else if (DATA_PARAMS[1] == "ac") {
pca_info$Depth[pca_info$Individual == "KP0406_NA_NANA"] = "20"
pca_info$Loc[pca_info$Individual == "KP0406_NA_NANA"] = "WP"
pca_info$Site[pca_info$Individual == "KP0406_NA_NANA"] = "WP20"
# pca_info$Depth[pca_info$Individual == "KP0673_NA_NANA"] = "20"
# pca_info$Loc[pca_info$Individual == "KP0673_NA_NANA"] = "SB" Not assigned to AC?
# pca_info$Site[pca_info$Individual == "KP0673_NA_NANA"] = "SB20"
pca_info$Depth[pca_info$Individual == "KP0844_UN_NANA"] = "10"
pca_info$Loc[pca_info$Individual == "KP0844_UN_NANA"] = "WP"
pca_info$Site[pca_info$Individual == "KP0844_UN_NANA"] = "WP10"
pca_info$Depth[pca_info$Depth == "12"] = "10-12"
pca_info$Depth[pca_info$Depth == "10"] = "10-12"
shapes = c(2, 6, 17, 4)
} else if (DATA_PARAMS[1] == "lm" & DATA_PARAMS[3] == "nc") {
pca_info$Depth[pca_info$Individual == "KP0723_NA_NANA"] = "20"
pca_info$Loc[pca_info$Individual == "KP0723_NA_NANA"] = "SB"
pca_info$Site[pca_info$Individual == "KP0723_NA_NANA"] <- "SB20"
pca_info$Depth[pca_info$Depth == "12"] = "10-12"
pca_info$Depth[pca_info$Depth == "10"] = "10-12"
shapes = c(6, 6, 17)
} else if (DATA_PARAMS[1] == "hu") {
pca_info$Depth[pca_info$Depth == "12"] = "10-12"
pca_info$Depth[pca_info$Depth == "10"] = "10-12"
} else if (DATA_PARAMS[1] == "lm" & (DATA_PARAMS[2] == "1d-pure" | DATA_PARAMS[3] == "nc-wnr")) {
pca_info$Depth[pca_info$Individual == "KP0723_NA_NANA"] = "20"
pca_info$Loc[pca_info$Individual == "KP0723_NA_NANA"] = "SB"
pca_info$Site[pca_info$Individual == "KP0723_NA_NANA"] <- "SB20"
pca_info$Loc[pca_info$Loc == "CK"] = "WP"
pca_info$Loc[pca_info$Loc == "CS"] = "SQ"
shapes = c(6, 6, 5, 17, 15)
pca_info$Depth[pca_info$Depth == "12"] = "10-12"
pca_info$Depth[pca_info$Depth == "10"] = "10-12"
pca_info$Site[pca_info$Individual == "NR4671_L1_CS50"] = "AL1-50"
pca_info$Site[pca_info$Individual == "NR5050_L2_CS15"] = "AL2-15"
pca_info$Site[pca_info$Individual == "NR5053_L2_CS15"] = "AL2-15"
pca_info$Site[pca_info$Individual == "NR5242_L1_CK50"] = "AL1-50"
pca_info$Site[pca_info$Individual == "NR5533_L2_CR15"] = "AL2-15"
pca_info$Site[pca_info$Individual == "NR5534_L1_CR15"] = "AL1-15"
}
write.csv(pca_info, file = paste0(PATH, "_pcscores", nf, ".csv"), quote = FALSE, row.names = TRUE)
# Save eigenvectors
eig <- pca$eig
eig <- round(eig[1:length(eig)]/sum(eig)*100, 2)
dat <- as.data.frame(eig[1:20])
colnames(dat) <- "eig"
ggplot(dat, aes(1:20, y = eig)) + geom_point() + geom_line() +
scale_y_continuous(name = "% variation explained", breaks = c(seq(1,  (max(dat$eig) + 2), 2))) +
scale_x_continuous(name = "PC axes", breaks = c(seq(1,  20, 2))) + theme_bw()
ggsave(paste0(PATH, "_eig_plot.pdf"), height = 5, width = 5, units = "cm", dpi = 400)
# Making plots ####
for (i in 1:(nf/2)) {
j = seq(1, nf, 2)
k = seq(2, nf, 2)
if (plot_type == "depth") {
if (DATA_PARAMS[1] == "all-aga") {
colours <- c("#EC9C9D", "#C4AABB", "#9BB7DB", "#FFE1A6", "#8BD3D7", "#88C762")
shapes = c(2, 6, 6, 5, 17, 15)
pca_info$Depth = factor(pca_info$Depth, levels = c("5", "10-12", "20", "15", "50"))
pca_info$Loc <- as.factor(pca_info$Loc)
pca_info$Site <- as.factor(pca_info$Site)
pca.plot <- pca_plot_depth_all(pca_info, eig, title, j[i], k[i], colours, shapes, n.loc)
ggsave(pca.plot, file = paste0(PATH,"_depth_facet_pca-x", j[i], k[i], ".pdf"), width = 8, height = 12, units = "cm", dpi = 400) # TODO: might need to alter this!!!
} else if (DATA_PARAMS[1] == "lm" & (DATA_PARAMS[2] == "1d-pure" | DATA_PARAMS[3] == "nc-wnr")) {
colours <- c("#EC9C9D", "#AA5459",
"#C4AABB", "#8C6C82",
"#9BB7DB", "#5179A6",
"#8BD3D7", "#74A8B6",
"#6F1242", "#6652A2",
"#4E1136")
pca_info$Loc[pca_info$Individual == "NR4671_L1_CS50"] = "AL1"
pca_info$Loc[pca_info$Individual == "NR5050_L2_CS15"] = "AL2"
pca_info$Loc[pca_info$Individual == "NR5053_L2_CS15"] = "AL2"
pca_info$Loc[pca_info$Individual == "NR5242_L1_CK50"] = "AL1"
pca_info$Loc[pca_info$Individual == "NR5533_L2_CR15"] = "AL2"
pca_info$Loc[pca_info$Individual == "NR5534_L1_CR15"] = "AL1"
pca_info$Depth = factor(pca_info$Depth, levels = c("10-12", "20", "15", "50"))
pca_info$Loc <- as.factor(pca_info$Loc)
pca_info$Site <- as.factor(pca_info$Site)
#pca.plot <- pca_plot_depth_lm_pure(pca_info, eig, title, j[i], k[i], colours, shapes, n.loc)
pca.plot <- pca_plot_depth_lm_pure_facet(pca_info, eig, title, j[i], k[i], colours)
ggsave(pca.plot, file = paste0(PATH,"_depth_facet_pca-x", j[i], k[i], ".pdf"), width = 8, height = 12, units = "cm", dpi = 400)
} else {
colours <- c("#FBD1D7", "#EC9C9D", "#AA5459",
"#E2DCE0", "#C4AABB", "#8C6C82",
"#C0DFF5", "#9BB7DB", "#5179A6",
"#8BD3D7", "#74A8B6")
pca_info$Depth <- factor(pca_info$Depth, levels = c("5", "10-12", "20"))
pca_info$Loc <- as.factor(pca_info$Loc)
pca_info$Site <- as.factor(pca_info$Site)
#pca.plot <- pca_plot_depth(pca_info, eig, title, j[i], k[i], colours, shapes, n.loc)
pca.plot <- pca_plot_depth_facet(pca_info, eig, title, j[i], k[i], colours)
ggsave(pca.plot, file = paste0(PATH,"_depth_facet_pca-x", j[i], k[i], ".pdf"), width = 8, height = 12, units = "cm", dpi = 400)
}
plotPATH = paste0(PATH,"_depth_pca", j[i], k[i], ".pdf")
# Admixture ============================
} else if (plot_type == "admixture") {
if (DATA_PARAMS[1] == "all-aga") {
admix_k <- 4
taxa_k <- 3
colours <- c("#2D4E24", #agaricites1
"#6F1242", #lamarcki1
"#B06327", #humilis1
"#6652A2") #lamarcki2
loc_levels <- c("WP", "CA", "SB", "SQ", "CR")
depth_levels <- c("10-12", "20", "15", "50")
threshold <- 0.8
} else if (DATA_PARAMS[1] == "ac") {
admix_k <- nf
taxa_k <- 2
colours <- c("#2D4E24", "#8FC73E", "#43BB93", "#347F66")
loc_levels <- c("WP", "CA", "SB", "SQ")
depth_levels <- c("5", "10-12", "20")
threshold <- 0.90
} else if (DATA_PARAMS[1] == "hu") {
admix_k <- 4
taxa_k <- 3
colours <- c("#B06327", "#FAA41A", "#F05123", "#821F27")
loc_levels <- c("WP", "CA", "SB", "SQ")
depth_levels <- c("5", "10-12", "20")
threshold <- 0.8
} else if (DATA_PARAMS[1] == "lm" & DATA_PARAMS[3] == "nc") {
admix_k <- 2
taxa_k <- 2
colours <- c("#6F1242", "#6652A2")
loc_levels <- c("WP", "CA", "SB", "SQ")
depth_levels <- c("10-12", "20")
threshold <- 0.8
} else if (DATA_PARAMS[1] == "lm" & (DATA_PARAMS[2] == "1d-pure" | DATA_PARAMS[3] == "nc-wnr")) {
admix_k <- 2
taxa_k <- 2
colours <- c("#6F1242", "#6652A2")
loc_levels <- c("WP", "CA", "SB", "SQ", "CR")
depth_levels <- c("10-12", "20", "15", "50")
threshold <- 0.8
} else {
admix_k <- 2
taxa_k <- 2
colours <- c("red", "blue")
}
pca_info$Loc <- factor(pca_info$Loc, levels = loc_levels)
pca_info$Depth <- factor(pca_info$Depth, levels = depth_levels)
clusters <- append(clusters, paste0("Clust", 2:admix_k))
print(paste0(DATA_PARAMS[1], " dataset set to k=", admix_k, " for admixture assignment and taking from sortedQ"))
Q <- read.table(paste0("../results/admix_runs/", DATA_PARAMS[4], "percent_", DATA_PARAMS[1], "_",
DATA_PARAMS[2], "_", DATA_PARAMS[3], "/sortedQ/", DATA_PARAMS[1], "_2bi_", DATA_PARAMS[2],
"_", DATA_PARAMS[3], "_",DATA_PARAMS[4], ".", admix_k, ".Q"), header = TRUE)
taxaQ <- read.table(paste0("../results/admix_runs/", DATA_PARAMS[4], "percent_", DATA_PARAMS[1], "_",
DATA_PARAMS[2], "_", DATA_PARAMS[3], "/sortedQ/", DATA_PARAMS[1], "_2bi_", DATA_PARAMS[2],
"_", DATA_PARAMS[3], "_",DATA_PARAMS[4], ".", taxa_k, ".Q"), header = TRUE)
source('func-k.R')
admix_data <- cbind(pop, taxaQ)
sorted_clusters <- sort_clusters(Q, admix_k)
admix_data <- choose_Qprop(admix_data, taxa_k, threshold)
pca_info$Clusters <- sorted_clusters
pca_info$Taxa <- admix_data$Taxa
for (column in c("Site", "Clusters", "Taxa")) {
pca_info[, column] <- as.factor(pca_info[, column])
}
pca_info$Q <- Q
print("Writing sorted admix assignments to data ;)")
write.csv(pca_info, paste0("../results/", VCF_NAME, "_", admix_k, ".csv"), quote = FALSE,
row.names = FALSE)
pca.plot <- pca_plot_admixture(pca_info, eig, title, j[i], k[i], n.loc)
plotPATH = paste0(PATH,"_admixture_pca", j[i], k[i], ".pdf")
ggsave(pca.plot, file = plotPATH, width = 8, height = 12, units = "cm", dpi = 400)
} else {
# species
colours = c("#2D4E24", "#B06327", "#6F1242", "#066991", "grey")
pca_info$Depth = factor(pca_info$Depth, levels = c("5", "10-12", "20", "15", "50"))
pca_info$Loc <- as.factor(pca_info$Loc)
pca_info$Site <- as.factor(pca_info$Site)
pca.plot <- pca_plot_species(pca_info, eig, title, j[i], k[i], colours, n.loc)
plotPATH = paste0(PATH,"_species_pca-x", j[i], k[i], ".pdf")
ggsave(pca.plot, file = plotPATH, width = 7, height = 20, units = "cm", dpi = 400)
}
}
ggplot(info, aes_(x = as.name(paste0("PC",int1)), y = as.name(paste0("PC",int2)),
fill= info$Species)) +
geom_point(size = 2, shape = 21, colour = "grey") +
scale_fill_manual(name = "Species", values = colours, breaks = c("AA", "AH", "AL", "AG")) +
xlab(paste0("PC", int1, " ", eig[int1], "%")) +
ylab(paste0("PC", int2, " ", eig[int2], "%")) +
#ggtitle(paste0("PCA of ", DATA_NAME, ", n = ", count(info), ", SNPs = ", n.loc),
#        subtitle = title) +
theme(plot.background = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.background = element_blank(),
legend.key = element_blank(),
panel.border = element_rect(colour = "grey", fill = NA, linewidth = 1),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8)) + facet_wrap(~Depth, nrow = 6, ncol = 1)
View(admix_data)
View(pca_info)
print(paste0(DATA_PARAMS[1], " dataset set to k=", admix_k, " for admixture assignment and taking from sortedQ"))
Q <- read.table(paste0("../results/admix_runs/", DATA_PARAMS[4], "percent_", DATA_PARAMS[1], "_",
DATA_PARAMS[2], "_", DATA_PARAMS[3], "/sortedQ/", DATA_PARAMS[1], "_2bi_", DATA_PARAMS[2],
"_", DATA_PARAMS[3], "_",DATA_PARAMS[4], ".", admix_k, ".Q"), header = TRUE)
taxaQ <- read.table(paste0("../results/admix_runs/", DATA_PARAMS[4], "percent_", DATA_PARAMS[1], "_",
DATA_PARAMS[2], "_", DATA_PARAMS[3], "/sortedQ/", DATA_PARAMS[1], "_2bi_", DATA_PARAMS[2],
"_", DATA_PARAMS[3], "_",DATA_PARAMS[4], ".", taxa_k, ".Q"), header = TRUE)
source('func-k.R')
admix_data <- cbind(pop, taxaQ)
View(admix_data)
sorted_clusters <- sort_clusters(Q, admix_k)
sorted_clusters
admix_data <- choose_Qprop(admix_data, taxa_k, threshold)
admix_data
pca_info$Clusters <- sorted_clusters
pca_info$Taxa <- admix_data$Taxa
for (column in c("Site", "Clusters", "Taxa")) {
pca_info[, column] <- as.factor(pca_info[, column])
}
pca_info$Q <- Q
View(pca_info)
pca_info$taxaQ <- taxaQ
View(pca_info)
## Dependencies  ===================================================
library(tidyverse)
library(adegenet)
library(vcfR)
library(ggtree)
library(treeio)
library(ggstance)
library(RColorBrewer)
library(phytools)
library(ggplotify)
# Functions ==========================================
organise_data <- function(qfile, popfile, clusters){
# where q file is your STRUCURE or Admixture output "Q" file
# where popfile is first columns of your sample names and next column your population sites
# clusters is a list of your clusters, i.e., clusters = c("Clust1", "Clust2, ... etc)
data <- as.data.frame(cbind(popfile,qfile))
clusters <- expand.grid(popfile[,1], clusters)
n <- ncol(data)
Assignment_t <- as.matrix(data[,3:n])
Assignment <- matrix(Assignment_t, ncol = 1)
plotdata <- cbind(clusters,Assignment)
plotdata <- cbind(plotdata,popfile[,2])
colnames(plotdata) <- c("Individuals","Clusters","Assignment","pop")
return(plotdata)
}
basic_tree <- function(tree, pop_meta, k_selection) {
rooted_tree <- midpoint.root(tree)
# Set groups by using tibble
tibble <- as_tibble(rooted_tree)
col = which(colnames(pop_meta) == k_selection)
group_tibble <- tibble(label = pop_meta$Individual,
group = pop_meta[,col])
# Set tree info
tree_tibble_group <- full_join(tibble, group_tibble, by = 'label')
tree_tibble_group
tree_x <- as.phylo(tree_tibble_group)
# Basic tree plot
tree_plot <- ggtree(tree_x) +
geom_tippoint(aes(colour = tree_tibble_group$group), size = 1) #+
#geom_tiplab(aes(colour = tree_tibble_group$group), size = 1, align = TRUE)
return(tree_plot)
}
advanced_tree <- function(tree_plot, pop_meta, colours, clusters, k) {
tree_plot + theme_tree2() +
geom_facet(panel = "Admixture", data = admix, geom = geom_barh,
mapping = aes(x = Assignment, fill = Clusters), stat = 'identity') +
scale_fill_manual(name = "Cluster",
values = colours) +
# Note: Breaks here controls the order of the colour values
# before it was in alphanumeric order...
scale_color_manual(name = "Assignment", values = colours,
label = clusters, breaks = clusters) +
theme(legend.position = "none",
strip.background.x = element_blank(),
strip.text.x = element_text(size = 12),
panel.border = element_rect(fill = "NA", linewidth = 0.2),
panel.background = element_blank())
}
advanced_tree_loc_depth <- function(tree_plot, pop_meta, colours, clusters, k) {
tree_plot + theme_tree2() +
geom_facet(panel = "Admixture", data = admix, geom = geom_barh,
mapping = aes(x = Assignment, fill = Clusters), stat = 'identity') +
geom_facet(panel = "Location", data = pop_meta, geom = geom_point,
mapping = aes(x = Loc_value, colour = Loc), size = 1) +
geom_facet(panel = "Depth", data = pop_meta, geom = geom_point,
mapping = aes(x = Depth_values, colour = Site), size = 1) +
scale_fill_manual(name = "Cluster",
values = colours[(length(levels(pop_meta$Site)) + 1):(length(levels(pop_meta$Site)) + k)]) +
# Note: Breaks here controls the order of the colour values
# before it was in alphanumeric order...
scale_color_manual(name = "Assignment", values = colours,
label = c(levels(pop_meta$Site),
clusters, levels(pop_meta$Loc)), breaks = c(levels(pop_meta$Site), clusters,
levels(pop_meta$Loc))) +
theme(legend.position = "none",
strip.background.x = element_blank(),
strip.text.x = element_text(size = 12),
panel.border = element_rect(fill = "NA", linewidth = 0.2),
panel.background = element_blank())
}
# Arguments ====
args = commandArgs(TRUE)
VCF_NAME = args[1] # "ac" "hu" ""lm"
STAGE = args[2] # "1div"
PARAM = args[3] # "nc" or "wc"
k_selection = args[4] # "Taxa" or "Cluster"
include.het = args[5] # "yes" or "no"
plot_widths = list(as.numeric(strsplit(args[6], ",")[[1]])) # how spaces the plot widths are (given how many panels)
# TODO: need to look up how to have argument lists in R
VCF_NAME = "hu"
STAGE = "1div"
PARAM = "nc"
k_selection = "Taxa" # Taxa or Clusters
include.het = "no"
plot_widths = c(1, 0.8, 0.7, 0.5)
# Set specific values here ====
if (VCF_NAME == "ac") {
cluster_k <- 4
taxa_k <- 2
colours_clust <- c("#2D4E24", "#8FC73E", "#43BB93", "#347F66")
levels <- c("WP", "CA", "SB", "SQ")
site_colours <- c("#FBD1D7", "#EC9C9D", "#AA5459",
"#E2DCE0", "#C4AABB", "#8C6C82",
"#C0DFF5", "#9BB7DB", "#5179A6",
"#8BD3D7", "#74A8B6")
site_labels = c("WP05", "WP10", "WP20",
"CA05", "CA10", "CA20",
"SB05", "SB10", "SB20",
"SQ12", "SQ20")
} else if (VCF_NAME == "hu") {
cluster_k <- 4
taxa_k <- 3
colours_clust <- c("#B06327", "#FAA41A", "#F05123", "#821F27")
levels <- c("WP", "CA", "SB", "SQ")
site_colours <- c("#FBD1D7", "#EC9C9D", "#AA5459",
"#E2DCE0", "#C4AABB", "#8C6C82",
"#C0DFF5", "#9BB7DB", "#5179A6",
"#8BD3D7", "#74A8B6")
site_labels = c("WP05", "WP10", "WP20",
"CA05", "CA10", "CA20",
"SB05", "SB10", "SB20",
"SQ12", "SQ20")
} else if (VCF_NAME == "lm") {
cluster_k <- 2
taxa_k <- 2
colours_clust <- c("#6F1242", "#6652A2")
site_colours <- c("#EC9C9D", "#AA5459",
"#C4AABB", "#8C6C82",
"#9BB7DB", "#5179A6",
"#8BD3D7", "#74A8B6")
site_labels <- c("WP10", "WP20",
"CA10", "CA20",
"SB10", "SB20",
"SQ12", "SQ20")
} else {
cluster_k <- 5
taxa_k <- 3
colours_clust <- rainbow(cluster_k)
# need to add arbitrary site_colours and site labels - but don't know how many sites,
# so will have to come later
}
# clusters names
if (k_selection == "Taxa") {
k <- taxa_k
} else if (k_selection == "Clusters") {
k <- cluster_k
} else {
print("Incorrect entry for k_selection")
}
clusters <- rep(k, k)
for (i in 1:k) {
clusters[i] <- paste0("Clust", i)}
# Data needed ====
pop_meta <- read.csv(paste0("../results/", VCF_NAME, "_", STAGE, "_", PARAM, "_20_", cluster_k, ".csv"), header = TRUE, stringsAsFactors = FALSE)
# miss_dat <- read.table(paste0("../data/miss-indiv/", VCF_NAME, "_", STAGE, "_", PARAM, "_20_miss-indiv.txt"), header = TRUE)
tree <- read.nexus(paste0("../results/", VCF_NAME,  "_", STAGE, "_", PARAM, "_20_tree.nex"))
# Adjustments to data files =====
# Clusters & colours
# For using less k than k all, we first set all entries to be the first colour
pop_meta$colours <- colours_clust[1]
for (i in 1:k) {
pop_meta$colours[pop_meta$Clusters == paste0("Clust", i)] <- colours_clust[i]
}
# Levels, factors, values & colours =====
pop_meta$Site <- factor(pop_meta$Site, levels = site_labels)
pop_meta$Loc <- factor(pop_meta$Loc, levels = c("WP", "CA", "SB", "SQ"))
for (i in 1:length(levels(pop_meta$Loc))) {
pop_meta$Loc_value[pop_meta$Loc == levels(pop_meta$Loc)[i]] = i + k
pop_meta$Loc_value[is.na(pop_meta$Loc)] = length(levels(pop_meta$Loc)) + k + 1
}
pop_meta$Depth[pop_meta$Depth == "10-12"] <- "10"
pop_meta$Depth <- factor(pop_meta$Depth, levels = c("5", "10", "20"))
pop_meta$Depth_values <- as.numeric(pop_meta$Depth)
loc_colours <- c("#EC9C9D", "#C4AABB", "#9BB7DB", "#8BD3D7")
colours <- c(site_colours, colours_clust[1:k], loc_colours)
# Admixture ====
if (k_selection == "Taxa") {
if (VCF_NAME == "lm") {
admix_column_start = which(colnames(pop_meta) == "Q.Clust1")
admix_column_end = admix_column_start + (k-1)
} else {
admix_column_start = which(colnames(pop_meta) == "taxaQ.Clust1")
admix_column_end = admix_column_start + (k-1)
}
admix <- organise_data(pop_meta[,admix_column_start:admix_column_end], pop_meta[,1:2], clusters)
} else if (k_selection == "Clusters") {
admix_column_start = which(colnames(pop_meta) == "Q.Clust1")
admix_column_end = admix_column_start + (k-1)
admix <- organise_data(pop_meta[,(11+(k-1)):(11+(k-1))], pop_meta[,1:2], clusters)
}
# Heterozygosity ====
if (include.het == "yes") {
het <- read.csv(paste0("../../E-intraspecific/results/fstat/", VCF_NAME, "_", STAGE, "_", PARAM, "_indiv.het.csv"), row.names = 1) # need to redo heterozygosity for without clones
het <- het[order(het$X),]
het$Loc <- pop_meta$Loc[match(het$X, pop_meta$Individual)]
het$Clust <- pop_meta$Clusters[match(het$X, pop_meta$Individual)]
} else if (include.het == "no") {
print("not including heterozygosity")
} else {
print("do you want to include heterozygosity?")
}
# Basic tree ====
tree_plot <- basic_tree(tree, pop_meta, k_selection)
tree_plot
# Advanced trees ====
if (PARAM == "nc") {
complot_admixture <- advanced_tree(tree_plot, pop_meta, colours[(length(levels(pop_meta$Site)) + 1):(length(levels(pop_meta$Site)) + k)], clusters, k)
ggsave(paste0("./combination_plot/", VCF_NAME, "_", STAGE, "_nc_20_complot_admixture.pdf"), complot_admixture,
dpi = 300, width = 3, height = 10, units = "cm")
complot_loc_depth <- advanced_tree_loc_depth(tree_plot, pop_meta, colours, clusters, k)
}
# Advanced trees ====
if (PARAM == "nc") {
complot_admixture <- advanced_tree(tree_plot, pop_meta, colours[(length(levels(pop_meta$Site)) + 1):(length(levels(pop_meta$Site)) + k)], clusters, k)
ggsave(paste0("../results/", VCF_NAME, "_", STAGE, "_nc_20_complot_admixture.pdf"), complot_admixture,
dpi = 300, width = 3, height = 10, units = "cm")
complot_loc_depth <- advanced_tree_loc_depth(tree_plot, pop_meta, colours, clusters, k)
}
complot_loc_depth <- advanced_tree_loc_depth(tree_plot, pop_meta, colours, clusters, k)
complot_loc_depth
complot_admixture
complot_loc_depth
detach("package:adegenet", unload = TRUE)
