#Estimating the frequencies as a log-normal distribution -> forces them to be positive
freqs <- list(DNC_log = log(DNC$Freq))
# intercept only model: mean has normal prior distribution ~N(1,1); error is exponentially distributed
intercept_m <- ulam(
alist(
DNC_log ~ dnorm(mu, error),
mu<-a,
a ~ dnorm(1 , 1),
error ~ dexp(1)
), data=freqs , chains=4 , log_lik=TRUE )
precis(intercept_m) # = posterior for intercept and error on log scale
exp(precis(intercept_m)$mean[1]) #= mean posterior freq on regular scale
exp(precis(intercept_m )$sd[1])
#sample DNC directly from posterior predicted distribution to use in your error propagation
DNC_post<-exp(extract.samples(intercept_m)$a) #in D/m2
# Make table of results
result_table <- data.frame(param = numeric(0),
lower.10 = numeric(0),
mid.50 = numeric(0),
upper.90 = numeric(0))
print("DNC")
print(signif(quantile(DNC_post, probs = c(0.1, 0.5, 0.9)), 2))
dnc.row <- c("DNC", round(quantile(DNC_post, probs = c(0.1, 0.5, 0.9)), 2))
result_table <- rbind(result_table, dnc.row)
# KINSHIP Ne density - assume gamma distribution b/c upper tail can be large
Ne_estimates <- read.csv("~/git/CalcluatingSigmaWithError/agaricia/agaricia_effective_density.txt")
Ne_estimates <- Ne_estimates[Ne_estimates$taxa == taxa,]
# Use the 99% percentile as upper limit for NE estimates due to low confidence
if (taxa == "AH1" | taxa == "AH3") {
Ne_estimates$Ne_high <- round(quantile(DNC_post, probs = c(0.99))*Ne_estimates$Area, 0)
}
DNE<-list()
for(r in 1:nrow(Ne_estimates)) {
De<-Ne_estimates[r,"Ne"]/(Ne_estimates[r,"Area"])
De_low<-Ne_estimates[r,"Ne_low"]/(Ne_estimates[r,"Area"])
De_high<-Ne_estimates[r,"Ne_high"]/(Ne_estimates[r,"Area"])
shape<-approx_gamma_pars(obs_quantiles=c(De_low, De, De_high))[1]
scale<-approx_gamma_pars(obs_quantiles=c(De_low, De, De_high))[2]
DNE[[r]] <-rgamma(2000, shape=shape, scale=scale)
}
DNE<-unlist(DNE)
hist(log10(DNE))
print("DNE")
print(round(quantile(DNE, probs = c(0.1, 0.5, 0.9)), 2))
dne.row <- c("DNE", round(quantile(DNE, probs = c(0.1, 0.5, 0.9)), 2))
result_table <- rbind(result_table, dne.row)
# Slope - estimating gamma function for prior -----------------------------
#Different using Nb for Rousset and Loiselle
if (taxa == "AA1") {
nb_quantiles_r <- c(25, 33, 46)
nb_quantiles_l <- c(35, 45, 60)
} else if (taxa == "AA2") {
nb_quantiles_r <- c(274, 582, -6185)
nb_quantiles_l <- c(361, 501, 818)
} else if (taxa == "AH1") {
nb_quantiles_l <- c(57, 82, 142)
} else if (taxa == "AH3") {
nb_quantiles_l <- c(17, 24, 38)
}
# Loiselle for all taxa
beta_quantiles_l <- rev(1/nb_quantiles_l)
beta_shape_l<-approx_gamma_pars(obs_quantiles=c(beta_quantiles_l))[[1]]
beta_scale_l<-approx_gamma_pars(obs_quantiles=c(beta_quantiles_l))[[2]]
# Create generative simulation model to simulate sigma ----------------------
# Simulate sigma calculations from isolation by distance slopes
# Model:
# sigma ~ Exp(mean) #LaPlacian or half-Gaussian possible too
# sigma = sqrt(1/(4piDb))
# DNC: use posterior observations
# DNE: use simulated values (already created above) with parameters estimated from empirical kinship data
# beta: simulate values from empirical slope estimates
# Simulate beta (loiselle)
sims<-2000
beta_l<-rgamma(sims, beta_shape_l, scale=beta_scale_l)
# Estimate census sigma (loiselle)
sigma_DNC<-sqrt(1/(4*pi*DNC_post*beta_l))
hist(log10(sigma_DNC))
print("Sigma DNC")
print(round(quantile(sigma_DNC, probs=c(0.1, 0.5, 0.9)),2))
s.dnc.row <- c("sigma_DNC", round(quantile(sigma_DNC, probs = c(0.1, 0.5, 0.9)), 2))
result_table <- rbind(result_table, s.dnc.row)
# Estimate effective sigma (loiselle)
sigma_DNE<-sqrt(1/(4*pi*DNE*beta_l))
hist(log10(sigma_DNE))
print("Sigma DNE")
print(round(quantile(sigma_DNE, probs=c(0.1, 0.5, 0.9)),2))
s.dne.row <- c("sigma_DNE", round(quantile(sigma_DNE, probs = c(0.1, 0.5, 0.9)), 2))
result_table <- rbind(result_table, s.dne.row)
# Estimate Nb - just from beta so same for NE and NC
Neighborhood<-4*pi*DNC_post*sigma_DNC^2
hist(log(Neighborhood))
print("Neighbourhood")
print(round(quantile(Neighborhood, probs=c(0.1, 0.5, 0.9)), 0))
nb.row <- c("Nb", round(quantile(Neighborhood, probs = c(0.1, 0.5, 0.9)), 0))
result_table <- rbind(result_table, nb.row)
# save output
write.csv(DNC_post, paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".DNC.txt"), quote = FALSE, row.names = FALSE)
write.csv(DNE, paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".DNE.txt"), quote = FALSE, row.names = FALSE)
# loiselle only
write.csv(Neighborhood,
paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".Neighborhood-loiselle.txt"),
quote = FALSE, row.names = FALSE)
write.csv(sigma_DNC, paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".sigma_DNC-loiselle.txt"), quote = FALSE, row.names = FALSE)
write.csv(sigma_DNE, paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".sigma_DNE-loiselle.txt"), quote = FALSE, row.names = FALSE)
# Rousset for AA1 and AA2
if (taxa == "AA1" | taxa == "AA2") {
beta_quantiles_r <- rev(1/nb_quantiles_r)
beta_shape_r<-approx_gamma_pars(obs_quantiles=c(beta_quantiles_r))[[1]]
beta_scale_r<-approx_gamma_pars(obs_quantiles=c(beta_quantiles_r))[[2]]
beta_r<-rgamma(sims, beta_shape_r, scale=beta_scale_r)
# Estimate census sigma (rousset)
sigma_DNC<-sqrt(1/(4*pi*DNC_post*beta_r))
hist(log10(sigma_DNC))
print("Sigma DNC")
print(round(quantile(sigma_DNC, probs=c(0.1, 0.5, 0.9)),2))
s.dnc.row <- c("sigma_DNC_r", round(quantile(sigma_DNC, probs = c(0.1, 0.5, 0.9)), 2))
result_table <- rbind(result_table, s.dnc.row)
# Estimate effective sigma (rousset)
sigma_DNE<-sqrt(1/(4*pi*DNE*beta_r))
hist(log10(sigma_DNE))
print("Sigma DNE")
print(round(quantile(sigma_DNE, probs=c(0.1, 0.5, 0.9)),2))
s.dne.row <- c("sigma_DNE_r", round(quantile(sigma_DNE, probs = c(0.1, 0.5, 0.9)), 2))
result_table <- rbind(result_table, s.dne.row)
# Estimate Nb - just from beta so same for NE and NC
Neighborhood<-4*pi*DNC_post*sigma_DNC^2
hist(log(Neighborhood))
print("Neighbourhood")
print(round(quantile(Neighborhood, probs=c(0.1, 0.5, 0.9)), 0))
nb.row <- c("Nb_r", round(quantile(Neighborhood, probs = c(0.1, 0.5, 0.9)), 0))
result_table <- rbind(result_table, nb.row)
# Rousset only
write.csv(Neighborhood,
paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".Neighborhood-rousset.txt"),
quote = FALSE, row.names = FALSE)
write.csv(sigma_DNC, paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".sigma_DNC-rousset.txt"), quote = FALSE, row.names = FALSE)
write.csv(sigma_DNE, paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".sigma_DNE-rousset.txt"), quote = FALSE, row.names = FALSE)
}
colnames(result_table) <- c("param", "low10", "mid50", "high90")
write.csv(result_table, paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".results-summary.txt"), quote = FALSE, row.names = FALSE)
}
View(result_table)
taxa
1626270572.17/1000
2.4985080599604e+19
signif(2.4985080599604e+19,0)
signif(2.4985080599604e+19,1)
signif(2.4985080599604e+19,2)
1/-0.00001
1/Inf
nb_quantiles_l
1/nb_quantiles_l
# Libaries
library(rethinking)
# Functions ---------------------------------------------------------------
# Find approximate alpha and beta parameters for a gamma distribution based on
# observing three quantiles
# Based on post below  - many thanks to "Sextus Empiricus"
#https://stats.stackexchange.com/questions/596388/fit-gamma-distribution-based-on-median-interquartile-range
# fit_gamma_pars() returns the fit of the supplied parameters, observed quantile values, and quantile probability thresholds
# using the Kolmogorov statistic
# large values are poor fits
fit_gamma_pars = function(par=c(1,1), obs_quantiles, p_thresholds=c(0.025,0.5,0.975)) {
p_quantiles = pgamma(obs_quantiles, shape = par[1], scale = par[2])
statistic = max(abs(p_quantiles - p_thresholds))
return(statistic)
}
#approx_gamma_pars() returns the approximate shape and scale parameters based on Nelder and Mead (1965) approximation
#par is the starting gamma distribution parameter values
approx_gamma_pars<-function(par  = c(1,1),obs_quantiles, p_thresholds=c(0.025,0.5,0.975)) {
params<-optim(par,
fit_gamma_pars,
par,
obs_quantiles,
p_thresholds)$par
return(params)
}
# Arguments.. # To do or loop ?
for (taxa in c("AA2")) {
print(taxa)
# Construct priors for density -------------------------------------------
# CENSUS density estimates per plot (units are De/m2)
DNC <- read.csv(paste0("~/git/CalcluatingSigmaWithError/agaricia/",
taxa, ".census.txt"))
#Estimating the frequencies as a log-normal distribution -> forces them to be positive
freqs <- list(DNC_log = log(DNC$Freq))
# intercept only model: mean has normal prior distribution ~N(1,1); error is exponentially distributed
intercept_m <- ulam(
alist(
DNC_log ~ dnorm(mu, error),
mu<-a,
a ~ dnorm(1 , 1),
error ~ dexp(1)
), data=freqs , chains=4 , log_lik=TRUE )
precis(intercept_m) # = posterior for intercept and error on log scale
exp(precis(intercept_m)$mean[1]) #= mean posterior freq on regular scale
exp(precis(intercept_m )$sd[1])
#sample DNC directly from posterior predicted distribution to use in your error propagation
DNC_post<-exp(extract.samples(intercept_m)$a) #in D/m2
# Make table of results
result_table <- data.frame(param = numeric(0),
lower.10 = numeric(0),
mid.50 = numeric(0),
upper.90 = numeric(0))
print("DNC")
print(signif(quantile(DNC_post, probs = c(0.1, 0.5, 0.9)), 2))
dnc.row <- c("DNC", round(quantile(DNC_post, probs = c(0.1, 0.5, 0.9)), 2))
result_table <- rbind(result_table, dnc.row)
# KINSHIP Ne density - assume gamma distribution b/c upper tail can be large
Ne_estimates <- read.csv("~/git/CalcluatingSigmaWithError/agaricia/agaricia_effective_density.txt")
Ne_estimates <- Ne_estimates[Ne_estimates$taxa == taxa,]
# Use the 99% percentile as upper limit for NE estimates due to low confidence
if (taxa == "AH1" | taxa == "AH3") {
Ne_estimates$Ne_high <- round(quantile(DNC_post, probs = c(0.99))*Ne_estimates$Area, 0)
}
DNE<-list()
for(r in 1:nrow(Ne_estimates)) {
De<-Ne_estimates[r,"Ne"]/(Ne_estimates[r,"Area"])
De_low<-Ne_estimates[r,"Ne_low"]/(Ne_estimates[r,"Area"])
De_high<-Ne_estimates[r,"Ne_high"]/(Ne_estimates[r,"Area"])
shape<-approx_gamma_pars(obs_quantiles=c(De_low, De, De_high))[1]
scale<-approx_gamma_pars(obs_quantiles=c(De_low, De, De_high))[2]
DNE[[r]] <-rgamma(2000, shape=shape, scale=scale)
}
DNE<-unlist(DNE)
hist(log10(DNE))
print("DNE")
print(round(quantile(DNE, probs = c(0.1, 0.5, 0.9)), 2))
dne.row <- c("DNE", round(quantile(DNE, probs = c(0.1, 0.5, 0.9)), 2))
result_table <- rbind(result_table, dne.row)
# Slope - estimating gamma function for prior -----------------------------
#Different using Nb for Rousset and Loiselle
if (taxa == "AA1") {
nb_quantiles_r <- c(25, 33, 46)
nb_quantiles_l <- c(35, 45, 60)
} else if (taxa == "AA2") {
nb_quantiles_r <- c(274, 582, Inf)
nb_quantiles_l <- c(361, 501, 818)
} else if (taxa == "AH1") {
nb_quantiles_l <- c(57, 82, 142)
} else if (taxa == "AH3") {
nb_quantiles_l <- c(17, 24, 38)
}
# Loiselle for all taxa
beta_quantiles_l <- rev(1/nb_quantiles_l)
beta_shape_l<-approx_gamma_pars(obs_quantiles=c(beta_quantiles_l))[[1]]
beta_scale_l<-approx_gamma_pars(obs_quantiles=c(beta_quantiles_l))[[2]]
# Create generative simulation model to simulate sigma ----------------------
# Simulate sigma calculations from isolation by distance slopes
# Model:
# sigma ~ Exp(mean) #LaPlacian or half-Gaussian possible too
# sigma = sqrt(1/(4piDb))
# DNC: use posterior observations
# DNE: use simulated values (already created above) with parameters estimated from empirical kinship data
# beta: simulate values from empirical slope estimates
# Simulate beta (loiselle)
sims<-2000
beta_l<-rgamma(sims, beta_shape_l, scale=beta_scale_l)
# Estimate census sigma (loiselle)
sigma_DNC<-sqrt(1/(4*pi*DNC_post*beta_l))
hist(log10(sigma_DNC))
print("Sigma DNC")
print(round(quantile(sigma_DNC, probs=c(0.1, 0.5, 0.9)),2))
s.dnc.row <- c("sigma_DNC", round(quantile(sigma_DNC, probs = c(0.1, 0.5, 0.9)), 2))
result_table <- rbind(result_table, s.dnc.row)
# Estimate effective sigma (loiselle)
sigma_DNE<-sqrt(1/(4*pi*DNE*beta_l))
hist(log10(sigma_DNE))
print("Sigma DNE")
print(round(quantile(sigma_DNE, probs=c(0.1, 0.5, 0.9)),2))
s.dne.row <- c("sigma_DNE", round(quantile(sigma_DNE, probs = c(0.1, 0.5, 0.9)), 2))
result_table <- rbind(result_table, s.dne.row)
# Estimate Nb - just from beta so same for NE and NC
Neighborhood<-4*pi*DNC_post*sigma_DNC^2
hist(log(Neighborhood))
print("Neighbourhood")
print(round(quantile(Neighborhood, probs=c(0.1, 0.5, 0.9)), 0))
nb.row <- c("Nb", round(quantile(Neighborhood, probs = c(0.1, 0.5, 0.9)), 0))
result_table <- rbind(result_table, nb.row)
# save output
write.csv(DNC_post, paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".DNC.txt"), quote = FALSE, row.names = FALSE)
write.csv(DNE, paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".DNE.txt"), quote = FALSE, row.names = FALSE)
# loiselle only
write.csv(Neighborhood,
paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".Neighborhood-loiselle.txt"),
quote = FALSE, row.names = FALSE)
write.csv(sigma_DNC, paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".sigma_DNC-loiselle.txt"), quote = FALSE, row.names = FALSE)
write.csv(sigma_DNE, paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".sigma_DNE-loiselle.txt"), quote = FALSE, row.names = FALSE)
# Rousset for AA1 and AA2
if (taxa == "AA1" | taxa == "AA2") {
beta_quantiles_r <- rev(1/nb_quantiles_r)
beta_shape_r<-approx_gamma_pars(obs_quantiles=c(beta_quantiles_r))[[1]]
beta_scale_r<-approx_gamma_pars(obs_quantiles=c(beta_quantiles_r))[[2]]
beta_r<-rgamma(sims, beta_shape_r, scale=beta_scale_r)
# Estimate census sigma (rousset)
sigma_DNC<-sqrt(1/(4*pi*DNC_post*beta_r))
hist(log10(sigma_DNC))
print("Sigma DNC")
print(round(quantile(sigma_DNC, probs=c(0.1, 0.5, 0.9)),2))
s.dnc.row <- c("sigma_DNC_r", round(quantile(sigma_DNC, probs = c(0.1, 0.5, 0.9)), 2))
result_table <- rbind(result_table, s.dnc.row)
# Estimate effective sigma (rousset)
sigma_DNE<-sqrt(1/(4*pi*DNE*beta_r))
hist(log10(sigma_DNE))
print("Sigma DNE")
print(round(quantile(sigma_DNE, probs=c(0.1, 0.5, 0.9)),2))
s.dne.row <- c("sigma_DNE_r", round(quantile(sigma_DNE, probs = c(0.1, 0.5, 0.9)), 2))
result_table <- rbind(result_table, s.dne.row)
# Estimate Nb - just from beta so same for NE and NC
Neighborhood<-4*pi*DNC_post*sigma_DNC^2
hist(log(Neighborhood))
print("Neighbourhood")
print(round(quantile(Neighborhood, probs=c(0.1, 0.5, 0.9)), 0))
nb.row <- c("Nb_r", round(quantile(Neighborhood, probs = c(0.1, 0.5, 0.9)), 0))
result_table <- rbind(result_table, nb.row)
# Rousset only
write.csv(Neighborhood,
paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".Neighborhood-rousset.txt"),
quote = FALSE, row.names = FALSE)
write.csv(sigma_DNC, paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".sigma_DNC-rousset.txt"), quote = FALSE, row.names = FALSE)
write.csv(sigma_DNE, paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".sigma_DNE-rousset.txt"), quote = FALSE, row.names = FALSE)
}
colnames(result_table) <- c("param", "low10", "mid50", "high90")
write.csv(result_table, paste0("~/git/CalcluatingSigmaWithError/agaricia/", taxa,
".results-summary.txt"), quote = FALSE, row.names = FALSE)
}
1138203237.05
signif(1138203237.05,2)
signif(7251586530968919040, 2)
8063810
signif(8063810, 2)
signif(8063810, 1)
0.0499999975000001*50
0.1499999925*50
0.2099999895*50
0.0499999975000001*50
0.80*50
0.799999960000002*50
0.260266060276821*50
0.936957816996557*50
1.41*50
0.05*50
1.35*50
1.93*50
0.51*50
0.78*50
0.42*50
1.82*50
3.28*50
0.9*50
0.16*50
0.08*50
0.25*50
0.12*50
0.17*50
0.82*50
0.41*50
0.59*50
0.06*50
0.33*50
0.12*50
56/528
View(Ne_estimates)
# KINSHIP Ne density - assume gamma distribution b/c upper tail can be large
Ne_estimates <- read.csv("~/git/CalcluatingSigmaWithError/agaricia/agaricia_effective_density.txt")
Ne_estimates$Ne/Ne_estimates$Area
0.36
View(Ne_estimates)
Ne_estimates$De <- Ne_estimates$Ne/Ne_estimates
Ne_estimates$De <- Ne_estimates$Ne/Ne_estimates$Area
Ne_estimates$De <- round(Ne_estimates$Ne/Ne_estimates$Area, 2)
taxa <- "AA1"
# loiselle
l.sigma.dne <- read.csv(paste0("~/git/CalcluatingSigmaWithError/agaricia/",
taxa, ".sigma_DNE-loiselle.txt"))
l.sgima.dnc <- read.csv(paste0("~/git/CalcluatingSigmaWithError/agaricia/",
taxa, ".sigma_DNC-loiselle.txt"))
quantile(l.sigma.dne, c(0.4, 0.5, 0.6))
quantile(l.sigma.dne, probs = c(0.25, 0.5, 0.75))
View(l.sgima.dnc)
quantile(l.sigma.dne$x, probs = c(0.25, 0.5, 0.75))
round(quantile(l.sigma.dne$x, probs = c(0.25, 0.5, 0.75)),2)
# rousset
r.sigma.dne <- read.csv(paste0("~/git/CalcluatingSigmaWithError/agaricia/",
taxa, ".sigma_DNE-rousset.txt"))
r.sigma.dnc <- read.csv(paste0("~/git/CalcluatingSigmaWithError/agaricia/",
taxa, ".sigma_DNC-rousset.txt"))
round(quantile(r.sigma.dne$x, probs = c(0.25, 0.5, 0.75)),2)
# rousset
r.sigma.dne <- read.csv(paste0("~/git/CalcluatingSigmaWithError/agaricia/",
taxa, ".sigma_DNE-rousset.txt"))
round(quantile(r.sigma.dne$x, probs = c(0.25, 0.5, 0.75)),2)
# rousset
r.sigma.dne <- read.csv(paste0("~/git/CalcluatingSigmaWithError/agaricia/",
taxa, ".sigma_DNE-rousset.txt"))
round(quantile(r.sigma.dne$x, probs = c(0.25, 0.5, 0.75)),2)
taxa <- "AA2"
# rousset
r.sigma.dne <- read.csv(paste0("~/git/CalcluatingSigmaWithError/agaricia/",
taxa, ".sigma_DNE-rousset.txt"))
round(quantile(r.sigma.dne$x, probs = c(0.25, 0.5, 0.75)),2)
# loiselle
l.sigma.dne <- read.csv(paste0("~/git/CalcluatingSigmaWithError/agaricia/",
taxa, ".sigma_DNE-loiselle.txt"))
round(quantile(l.sigma.dne$x, probs = c(0.25, 0.5, 0.75)),2)
# loiselle
l.sigma.dne <- read.csv(paste0("~/git/CalcluatingSigmaWithError/agaricia/",
taxa, ".sigma_DNE-loiselle.txt"))
round(quantile(l.sigma.dne$x, probs = c(0.25, 0.5, 0.75)),2)
taxa <- "AH3"
# loiselle
l.sigma.dne <- read.csv(paste0("~/git/CalcluatingSigmaWithError/agaricia/",
taxa, ".sigma_DNE-loiselle.txt"))
round(quantile(l.sigma.dne$x, probs = c(0.25, 0.5, 0.75)),2)
taxa <- "AH1"
# loiselle
l.sigma.dne <- read.csv(paste0("~/git/CalcluatingSigmaWithError/agaricia/",
taxa, ".sigma_DNE-loiselle.txt"))
round(quantile(l.sigma.dne$x, probs = c(0.25, 0.5, 0.75)),2)
7.20^2*pi*4
18*10
2.70^2*pi*4
18.46^2*pi*4
3.14^2*pi*4
84.22^2*pi*4
setwd("~/git/popgen_rad_shallow_agaricia/E-intraspecific/scripts/")
taxa <- "AA1"
# loiselle
l.sigma.dne <- read.csv(paste0("../results/distributions/",
taxa, ".sigma_DNE-loiselle.txt"))
sigma50 <- round(quantile(l.sigma.dne$x, probs = c(0.25, 0.75)),2)
sigma_quantiles <- as.data.frame(round(quantile(l.sigma.dne$x,
probs = c(0.10, 0.25, 0.5, 0.75, 0.9)),
2))
View(sigma_quantiles)
# loiselle
l.sigma.dne <- read.csv(paste0("../results/distributions/",
taxa, ".sigma_DNE-loiselle.txt"))
sigma_quantiles <- as.data.frame(round(quantile(l.sigma.dne$x,
probs = c(0.10, 0.25, 0.5, 0.75, 0.9)),
2))
colnames(sigma_quantiles) <- taxa
write.csv(sigma_quantiles, paste0("../results/distributions/",
taxa, ".sigma_DNE-loiselle_quantiles.txt"), quote = FALSE)
l.sigma.dnc <- read.csv(paste0("../results/distributions/",
taxa, ".sigma_DNC-loiselle.txt"))
sigma_quantiles <- as.data.frame(round(quantile(l.sigma.dne$x,
probs = c(0.10, 0.25, 0.5, 0.75, 0.9)),
2))
colnames(sigma_quantiles) <- taxa
write.csv(sigma_quantiles, paste0("../results/distributions/",
taxa, ".sigma_DNC-loiselle_quantiles.txt"), quote = FALSE)
View(l.sigma.dnc)
View(sigma_quantiles)
sigma_quantiles <- as.data.frame(round(quantile(l.sigma.dnc$x,
probs = c(0.10, 0.25, 0.5, 0.75, 0.9)),
2))
colnames(sigma_quantiles) <- taxa
write.csv(sigma_quantiles, paste0("../results/distributions/",
taxa, ".sigma_DNC-loiselle_quantiles.txt"), quote = FALSE)
View(l.sigma.dnc)
View(sigma_quantiles)
l.sigma.dnc <- read.csv(paste0("../results/distributions/",
taxa, ".sigma_DNC-loiselle.txt"))
sigma_quantiles <- as.data.frame(round(quantile(l.sigma.dnc$x,
probs = c(0.10, 0.25, 0.5, 0.75, 0.9)),
2))
View(sigma_quantiles)
View(l.sigma.dnc)
View(l.sigma.dnc)
sigma_quantiles <- as.data.frame(round(quantile(l.sigma.dnc$V1,
probs = c(0.10, 0.25, 0.5, 0.75, 0.9)),
2))
View(sigma_quantiles)
colnames(sigma_quantiles) <- taxa
write.csv(sigma_quantiles, paste0("../results/distributions/",
taxa, ".sigma_DNC-loiselle_quantiles.txt"), quote = FALSE)
View(sigma_quantiles)
# rousset
r.sigma.dne <- read.csv(paste0("../results/distributions/",
taxa, ".sigma_DNE-rousset.txt"))
sigma_quantiles <- as.data.frame(round(quantile(l.sigma.dne$x,
probs = c(0.10, 0.25, 0.5, 0.75, 0.9)),
2))
colnames(sigma_quantiles) <- taxa
write.csv(sigma_quantiles, paste0("../results/distributions/",
taxa, ".sigma_DNE-rousset_quantiles.txt"), quote = FALSE)
r.sigma.dnc <- read.csv(paste0("../results/distributions/",
taxa, ".sigma_DNC-rousset.txt"))
sigma_quantiles <- as.data.frame(round(quantile(l.sigma.dnc$V1,
probs = c(0.10, 0.25, 0.5, 0.75, 0.9)),
2))
colnames(sigma_quantiles) <- taxa
write.csv(sigma_quantiles, paste0("../results/distributions/",
taxa, ".sigma_DNC-rousset_quantiles.txt"), quote = FALSE)
