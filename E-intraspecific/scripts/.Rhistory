View(moko_gendata)
header <- paste(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, sep ="\t")
header
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- paste("Ind", "X", "Y", colnames(moko_gendata1)[3:30], sep = ",")
colnames(moko_gendata1)[3:30]
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = ","))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(, paste("Ind", "X", "Y", colnames(moko_gendata1)[3:30], collapse = ","))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- paste("Ind", "X", "Y", colnames(moko_gendata1)[3:30], collapse = ","))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- paste("Ind", "X", "Y", colnames(moko_gendata1)[3:30], collapse = ",")
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = ","), sep = ",")
View(moko_geodata)
View(moko_gendata)
mokogendata[,1]
moko_gendata[,1]
moko_gendata[,30]
View(moko_gendata)
rest_lines <- cbind(moko_gendata[,1], moko_gendata[,30], moko_gendata[,31], moko_gendata[,2:29])
View(rest_lines)
# Convert to Spagedi ####
# genotype matrix (very similar to genepop)
gen_lines <- cbind(moko_gendata[,1], moko_gendata[,30], moko_gendata[,31], moko_gendata[,2:29])
View(gen_lines)
# Convert to Spagedi ####
# genotype matrix (very similar to genepop)
gen_lines <- cbind(moko_gendata[,1], moko_gendata[,30], moko_gendata[,31], moko_gendata[,2:29])
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
header <- c(paste(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, sep ="\t"), rep("", ncol(gen_lines) - 1))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("-7", rep("", ncol(gen_lines)-1))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"),
sep = "\t"), rep("", ncol(gen_lines) - 1))
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, second_line, thirdline, gen_lines, end_line)
spagedi <- rbind(header, second_line, third_line, gen_lines, end_line)
View(spagedi)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
# header
header <- c(paste("// Spagedi file format"), format(Sys.time(), "%Y%m%d@%H%M"), rep("", mcol(gen_lines)- 1))
# header
header <- c(paste("// Spagedi file format"), format(Sys.time(), "%Y%m%d@%H%M"), rep("", ncol(gen_lines)- 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(paste(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, sep ="\t"), rep("", ncol(gen_lines) - 1))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("-7", rep("", ncol(gen_lines)-1))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"),
sep = "\t"), rep("", ncol(gen_lines) - 1))
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M"), rep("", ncol(gen_lines)- 1)))
header
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines)- 1))
header
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines)- 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(paste(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, sep ="\t"), rep("", ncol(gen_lines) - 1))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("-7", rep("", ncol(gen_lines)-1))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"),
sep = "\t"), rep("", ncol(gen_lines) - 1))
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
View(spagedi)
View(spagedi)
30-3
View(moko_gendata)
ncol(moko_gendata)
ncol(moko_gendata)-3
3:30
length(3:30)
View(gen_lines)
View(spagedi)
View(spagedi)
# Convert to Spagedi ####
# genotype matrix (very similar to genepop)
gen_lines <- cbind(moko_gendata[,1], moko_gendata[,30], moko_gendata[,31], moko_gendata[,2:29])
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines)- 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, rep("", ncol(gen_lines) - 7))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("-7", rep("", ncol(gen_lines)-1))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"),
sep = "\t"), rep("", ncol(gen_lines) - 1))
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, rep("", ncol(gen_lines) - 6))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"))
third_line
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", colnames(moko_gendata1)[3:30])
third_line
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
View(spagedi)
View(spagedi)
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines) - 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, rep("", ncol(gen_lines) - 6))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("7", "150", "300", "450", "600", "750", "900", "1050", rep("", ncol(gen_lines) - 8))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", colnames(moko_gendata1)[3:30])
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE, sep = "\t")
View(spagedi)
setwd("~/Dropbox/agaricia_project_2019/shalo_ag/gen_project/popgen_rad_shallow_agaricia/")
setwd("~/Dropbox/agaricia_project_2019/shalo_ag/gen_project/popgen_rad_shallow_agaricia/E-intraspecific/scripts/")
# Title: Convert vcf to genepop and use gene pop
# Author: Katharine Prata
# Date created: 19/4/22
# Required packages
library(vcfR)
library(adegenet)
library(genepop)
library(tidyr)
library(dplyr)
# Functions  ==================================================
standardise_plot_dist <- function(metadata, plot) {
metadata$x[metadata$Site == plot] <- metadata$x[metadata$Site == plot] + abs(min(metadata$x[metadata$Site == plot]))
metadata$y[metadata$Site == plot] <- metadata$y[metadata$Site == plot] + abs(min(metadata$y[metadata$Site == plot]))
return(metadata)
}
genind2genepop <- function(taxa.genind, taxa.pop, category) {
if (nchar(category) < 3) {
taxa.genind@pop <- as.factor(taxa.pop$Depth)
taxa.pop <- taxa.pop[taxa.pop$Depth == category, ]
taxa.genind.pop <- taxa.genind[taxa.genind@pop == category]
} else if (nchar(category) == 4) {
taxa.genind@pop <- as.factor(taxa.pop$Site)
taxa.pop <- taxa.pop[taxa.pop$Site == category, ]
taxa.genind.pop <- taxa.genind[taxa.genind@pop == category]
} else {
taxa.genind.pop <- taxa.genind
}
write.csv(taxa.pop, file = paste(vcf_name, taxa, category, ".csv", sep = "_"), quote = FALSE)
# Turn taxa.genind into dataframe
df <- genind2df(taxa.genind.pop, usepop = FALSE)
# Convert 0 to 01 and 1 to 02 and NA's to 0000
mat <- as.matrix(df)
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "0", replacement = "A")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "1", replacement = "T")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "A", replacement = "01")
mat <- apply(mat, FUN = gsub, MARGIN = 2, pattern = "T", replacement = "02")
mat[is.na(mat)] = "0000"
# Add the distances and individual name, and make distances positive
xy <- paste(taxa.pop$x, taxa.pop$y, paste0(indNames(taxa.genind.pop), ","))
mat <- cbind(xy, mat)
# Insert a Pop row between each population
# Double all rows
mat <- mat[rep(1:nrow(mat), 1, each = 2), ]
# Replace all duplicates with blank cells
mat[c(seq(2, dim(mat)[1], by = 2)), ] <- ""
mat[c(seq(2, dim(mat)[1] - 1, by = 2)), 1] <- "Pop"
mat <- mat[-nrow(mat),]
# Genepop header
file_date <- format(Sys.time(), "%Y%m%d@%H%M") # date and time
header <- c(paste("Genepop file format", file_date), rep("", ncol(mat) - 1))
loc_names <- c(paste(locNames(taxa.genind), collapse = ","), rep("", ncol(mat) - 1))
popline <- c("Pop", rep("", ncol(mat) - 1))
first_lines <- rbind(header, loc_names, popline)
mat <- rbind(first_lines, mat)
return(mat)
}
# Arguments ==================================================
# Required packages
library(vcfR)
library(adegenet)
library(genepop)
library(tidyr)
library(dplyr)
## Example use
taxa <- "AA1"
category <- "all" #(depth category)
scale <- "within"
# Import data  ==================================================
if (taxa == "AA1" | taxa == "AA2") {
vcf_name = "ac_3b_nc_20.vcf"
} else if (taxa == "AH1" | taxa == "AH2" | taxa == "AH3") {
vcf_name = "hu_3b_nc_20.vcf"
} else if (taxa == "AL1" | taxa == "AL2") {
vcf_name = "lm_3b_nc_20.vcf"
}
genind <- vcfR2genind(read.vcfR(paste0("../data/", vcf_name, ".vcf")))
# Import data  ==================================================
if (taxa == "AA1" | taxa == "AA2") {
vcf_name = "ac_3b_nc_20"
} else if (taxa == "AH1" | taxa == "AH2" | taxa == "AH3") {
vcf_name = "hu_3b_nc_20"
} else if (taxa == "AL1" | taxa == "AL2") {
vcf_name = "lm_3b_nc_20"
}
genind <- vcfR2genind(read.vcfR(paste0("../data/", vcf_name, ".vcf")))
metadata <- read.csv("../data/all_annotations_X_HORIZ_parallel_XYZ_adjusted.txt", sep = "\t")
View(metadata)
metadata <- read.csv("../data/all_annotations_X_HORIZ_parallel_XYZ_adjusted.txt", sep = ",")
View(metadata)
if (vcf_name == "ac_3b_nc_20") {
clusters <- read.csv("../data/ac_1div_nc_20_4.csv")
clusters$Taxa[clusters$Taxa == "Clust2"] = "AA2"
clusters$Taxa[clusters$Taxa == "Clust1"]  = "AA1"
} else if (vcf_name == "hu_3b_nc_20") {
clusters <- read.csv("../data/hu_1div_nc_20_4.csv")
clusters$Taxa[clusters$Taxa == "Clust1"] = "AH1"
clusters$Taxa[clusters$Taxa == "Clust2"]  = "AH2"
clusters$Taxa[clusters$Taxa == "Clust3"] = "AH3"
} else if (vcf_name == "lm_3b_nc_20") {
clusters <- read.csv("../data/lm_1div_nc-wnr_20_2.csv")
clusters$Taxa[clusters$Taxa == "Clust1"] = "AL1"
clusters$Taxa[clusters$Taxa == "Clust2"]  = "AL2"
}
View(clusters)
View(metadata)
View(clusters)
# sort metadata
metadata <- metadata %>% separate(Individual, into = c("Sample", "Species", "Site"), sep = "_", remove = FALSE) %>%
separate(Site, into = c("Loc", "Depth"), sep = 2, remove = FALSE) %>%
unite(Individual, Sample, Species, Site, remove = FALSE) %>%
select(Individual, Sample, Species, Site, Depth, x, y, z)
View(metadata)
metadata$Depth[metadata$Depth == "12"] = "10"
metadata$Site[metadata$Site == "SQ12"] = "SQ10"
# Match and subset datasets  ==================================================
pop <- metadata[metadata$Individual %in% indNames(genind),]
pop <- pop[order(pop$Individual),]
View(pop)
subset.clusters <- clusters[clusters$Individual %in% pop$Individual,]
identical(subset.clusters$Individual, pop$Individual)
pop$Clusters <- subset.clusters$Taxa
pop <- pop[!is.na(pop$Clusters), ]
subset.genind <- genind[indNames(genind) %in% pop$Individual,]
identical(indNames(subset.genind), pop$Individual)
subset.genind@pop <- as.factor(pop$Clusters)
taxa.genind <- subset.genind[subset.genind@pop == taxa]
taxa.pop <- pop[pop$Clusters == taxa,]
identical(indNames(taxa.genind), taxa.pop$Individual)
taxa.pop$Site <- as.factor(taxa.pop$Site)
summary(taxa.pop$Site)
# Convert 2 genepop and export file  ==================================================
genepop.mat <- genind2genepop(taxa.genind, taxa.pop, category)
write.table(genepop.mat, file = paste0("../data/", taxa,"_", category, ".genepop_copy.txt"), quote = FALSE, col.names = FALSE, row.names = FALSE)
# Gene pop  ==================================================
if (scale == "all") {
minD = 1e-03
maxD = 1e+05
} else if (scale == "within") {
minD = 1e-03
maxD = 1e+02
} else if (scale == "between") {
minD = 1e+02
maxD = 1e+05
}
ibd(paste0("../data/", taxa, "_", category, ".genepop_copy.txt"),
outputFile = paste0("../results/", taxa, "/", taxa, "_", category, ".", scale, ".results_copy.txt"),
settingsFile = "",
dataType = "Diploid",
statistic = "a",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = minD,
maximalDistance = maxD,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
View(genepop.mat)
ibd(paste0("../data/", taxa, "_", category, ".genepop_copy.txt"),
outputFile = paste0("../results/ibd/", taxa, "/", taxa, "_", category, ".", scale, ".results_copy.txt"),
settingsFile = "",
dataType = "Diploid",
statistic = "a",
geographicScale = "2D",
CIcoverage = 0.95,
testPoint = 0,
minimalDistance = minD,
maximalDistance = maxD,
mantelPermutations = 1000,
mantelRankTest = FALSE,
verbose = interactive())
# Required packages
library(ggplot2)
library(spaa)
#option = args[4] # "no"
taxa = "AH3"
category = "all"
scale = "all"
option = "no"
#taxa = args[1] #"AA2"
#category = args[2] #"WP05"
#scale = args[3] # "within"
#option = args[4] # "no"
taxa = "AA1"
category = "all"
scale = "within"
option = "no"
# Import data ==================================================
a <- read.delim(paste0("../results/ibd/", taxa, "/", taxa, "_", category, ".a.txt"), header = FALSE)
View(a)
# Required packages
library(ggplot2)
library(spaa)
# Arguments  ==================================================
args = commandArgs(TRUE)
#taxa = args[1] #"AA2"
#category = args[2] #"WP05"
#scale = args[3] # "within"
taxa = "AA1"
category = "all"
scale = "within"
# Import data ==================================================
a <- read.delim(paste0("../results/ibd/", taxa, "/", taxa, "_", category, ".a.txt"), header = FALSE)
lndist <- read.delim(paste0("../results/ibd/", taxa, "/", taxa, "_", category, ".lndist.txt"), header = FALSE)
results <- read.csv(paste0("../results/ibd/", taxa, "/",taxa, "_", category, ".", scale, ".results_short.txt"))
View(results)
if (taxa == "AA1" | taxa == "AA2") {
vcf = "ac_3b_nc_20"
} else if (taxa == "AL1" | taxa == "AL2") {
vcf = "lm_3b_nc_20"
} else if (taxa == "AH1" | taxa == "AH2" | taxa == "AH3") {
vcf = "hu_3b_nc_20"
}
taxa.depth.pop <- read.csv(paste0("../data/",vcf, "_", taxa, "_", category, "_.csv"), stringsAsFactors = TRUE)
table(taxa.depth.pop$Site)
results.round <- results
for (i in 1:7) {
results.round[,i] <- round(results[,i], 3)
}
row1 <- rep(NA, nrow(a))
a <- rbind(row1, a)
lndist <- rbind(row1, lndist)
b = results$slope
b.low = results$s.lowCI
b.high = results$s.highCI
regression <- c(results$intercept, b)
confidence_interval_lower <- c(results$i.lowCI, b.low)
confidence_interval_upper <- c(results$i.highCI, b.high)
pvalue = results$p.slope
sign = "="
# Re-organise data ==================================================
x <- lndist[lower.tri(lndist)]
y <- a[lower.tri(a)]
dat <- as.data.frame(cbind(x, y))
colnames(dat) <- c("distance", "a")
## setting axes & scales ####
if (scale == "within") {
dat <- dat[dat$distance < 8,]
xlim <- c(-4, 4)
if (taxa == "AA1" | taxa == "AA2") {
xlim <- c(-4, 4.1)
}
} else if (scale == "all") {
xlim <- c(-4, 11)
}
if (taxa == "AH2" | taxa == "AH1") {
ylim <- c(0, 4)
} else if (taxa == "AH3") {
ylim <- c(0, 11)
} else {
ylim <- c(-0.45, 0.45)
}
regression <- as.data.frame(cbind(regression[1], regression[2]))
confidence_interval_lower <- as.data.frame(cbind(confidence_interval_lower[1], confidence_interval_lower[2]))
confidence_interval_upper <- as.data.frame(cbind(confidence_interval_upper[1], confidence_interval_upper[2]))
y_lower <- dat$distance * confidence_interval_lower$V2 + confidence_interval_lower$V1
y_mean <- dat$distance * regression$V2 + regression$V1
y_upper <- dat$distance * confidence_interval_upper$V2 + confidence_interval_upper$V1
# Make plots  ========================
slope <- round(regression[2], 3)
res <- data.frame(cond1 = "regression",
x = dat$distance,
y = y_mean,
ymin = y_lower,
ymax = y_upper)
rib <- geom_ribbon(data = res, aes(x = x, y = y, ymin = ymin, ymax = ymax,
fill = cond1), fill = 'blue', alpha = 0.2)
p <- ggplot(dat, aes(distance, a)) +
geom_point(shape = 21) +
ylab("â") +
xlab("log distance") +
geom_abline(data = regression, aes(intercept = V1, slope = V2), colour = 'red') +
geom_line(data = res, aes(x, ymin), colour = 'blue', linetype = "dashed") +
geom_line(data = res, aes(x, ymax), colour = 'blue', linetype = "dashed") + rib + theme_bw() +
ggtitle(paste0("Slope = ", slope, " p ", sign, " ", round(pvalue, 4))) +
ylim(ylim) +
xlim(xlim) +
theme(plot.title = element_text(size = 10),
axis.title = element_text(size = 8),
axis.text = element_text(size = 8))
p
ggsave(paste0("../results/ibd/plots/", taxa, "_", category, "_", scale, "_genvdist_copy.pdf"), height = 4, width = 4, units = "cm", dpi = 400)
# Dispersal kernal ==================================================
# Density estimate
if (pvalue <= 0.06) {
taxa.depth.pop$Site <- as.factor(taxa.depth.pop$Site)
summary(taxa.depth.pop$Site)
total_samples = sum(summary(taxa.depth.pop$Site))
# genotyping rate = 2/3
N <- total_samples / (2/3)
# Annotation rate
if (taxa == "AA1") {
annotation_rate = 0.8571429
} else if (taxa == "AA2") {
annotation_rate = 0.8233333
} else if (taxa == "AH1") {
annotation_rate = 0.5211268
} else if (taxa == "AH2") {
annotation_rate = 0.7241379
} else if (taxa == "AH3") {
annotation_rate = 0.7647059
} else if (taxa == "AL1") {
annotation_rate = 0.6896552
} else if (taxa == "AL2") {
annotation_rate = 0.7580645
}
N <- N / annotation_rate
# discovery rate.. 70%
N <- N / 0.7
# per site
plots <- length(levels(taxa.depth.pop$Site))
N_plot <- N/plots
# D individuals within 25 x 2 = 50m2
D <- N_plot / 50 # individuals per m2
Neighbourhood <- 1 / b
Neighbourhood.low <- 1 / b.low
Neighbourhood.high <- 1 / b.high
sigma2 <- (1 / (4*D*pi*b))
sigma <- sqrt((1 / (4*D*pi*b)))
sigma.low <-  sqrt((1 / (4*D*pi*b.low)))
sigma.high <-  sqrt((1 / (4*D*pi*b.high)))
distance <- seq(0, 50, 5)
p.d <- (1/sigma) * exp(-distance/sigma)
p.d.low <- (1/sigma.low) * exp(-distance/sigma.low)
p.d.high <- (1/sigma.high) * exp(-distance/sigma.high)
plot(p.d ~ distance)
kernel <- as.data.frame(cbind(distance,p.d,p.d.low,p.d.high))
Lab <- expression(P(d) == paste(frac(1, sigma),
" ", e^{frac(-d, sigma)}))
res <- data.frame(cond1 = "regression",
x = distance,
y = p.d,
ymin = p.d.low,
ymax = p.d.high)
rib <- geom_ribbon(data = res, aes(x = x, y = y, ymin = ymin, ymax = ymax,
fill = cond1), fill = 'darkgrey', alpha = 0.8)
kernelplot <- ggplot(kernel, aes(distance, p.d)) + geom_line() + geom_line(aes(distance, p.d.low), linetype = "dashed", colour = "blue") +
geom_line(aes(distance, p.d.high), linetype = "dashed", colour = "red") +
theme_bw() +
annotate("text", x = 25, y = max(kernel$p.d.high)-0.08,
label = Lab, parse = T, size = 2) +
annotate("text", x = 18, y = max(kernel$p.d.high)+0.01,
label = "Upper 95% CI", colour = "red", size = 2) +
annotate("text", x = 30, y = mean(kernel$p.d.high),
label = "Lower 95% CI", colour = "blue", size = 2) +
ggtitle(paste0("Neighbourhood = ", round(Neighbourhood, 0))) +
annotate("text", x = 30, y = min(kernel$p.d)+sd(kernel$p.d*1.5),
label = expression(paste(sigma, " = ")), size = 2, parse = T) +
annotate("text", x = 36, y = min(kernel$p.d)+sd(kernel$p.d*1.5),
label = paste0(round(sigma, 1)), size = 2) +
ylab("P(d)") +
xlab("d (m)") + rib + theme(plot.title = element_text(size = 6),
axis.title = element_text(size = 8),
axis.text = element_text(size = 6))
kernelplot
ggsave(paste0("../results/ibd/plots/dispersal_kernel_", taxa, "_", category, "_", scale, ".pdf"), units = "cm", height = 4, width = 4, dpi = 400)
dispersal_data <- cbind(taxa, Neighbourhood, Neighbourhood.low, Neighbourhood.high,
D, sigma2, sigma)
write.csv(dispersal_data, paste0("../results/ibd/", taxa, "_", category, "_", scale, "_dispersal_results_copy.csv"), quote = FALSE,
row.names = FALSE)
}
