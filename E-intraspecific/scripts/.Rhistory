header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines)- 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(paste(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, sep ="\t"), rep("", ncol(gen_lines) - 1))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("-7", rep("", ncol(gen_lines)-1))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"),
sep = "\t"), rep("", ncol(gen_lines) - 1))
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
View(spagedi)
View(spagedi)
30-3
View(moko_gendata)
ncol(moko_gendata)
ncol(moko_gendata)-3
3:30
length(3:30)
View(gen_lines)
View(spagedi)
View(spagedi)
# Convert to Spagedi ####
# genotype matrix (very similar to genepop)
gen_lines <- cbind(moko_gendata[,1], moko_gendata[,30], moko_gendata[,31], moko_gendata[,2:29])
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines)- 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, rep("", ncol(gen_lines) - 7))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("-7", rep("", ncol(gen_lines)-1))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c(paste("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"),
sep = "\t"), rep("", ncol(gen_lines) - 1))
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, rep("", ncol(gen_lines) - 6))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", paste(colnames(moko_gendata1)[3:30], collapse = "\t"))
third_line
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", colnames(moko_gendata1)[3:30])
third_line
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
View(spagedi)
View(spagedi)
# header
header <- c(paste("// Spagedi file format", format(Sys.time(), "%Y%m%d@%H%M")), rep("", ncol(gen_lines) - 1))
# first line, 6 format numbers separated by a tab
#1. # of indiviudals, 2. # of categories(?), 3. # of spatial coordinates in a cartesian coordinate system (0 to 3),
# or put -2 for latitude & longitude, 4. # of loci, 5. # of digits used to code one allele (1 to 3), 6. ploidy
first_line <- c(nrow(moko_gendata), 0, 2, ncol(moko_gendata)-3, 2, 2, rep("", ncol(gen_lines) - 6))
# second line, number of distance intervals, preceded by a negative sign to choose ideal number based on samples
second_line <- c("7", "150", "300", "450", "600", "750", "900", "1050", rep("", ncol(gen_lines) - 8))
# the names used as column labels
# a generic name for individuals(?), spatial coordinates, name of each locus
third_line <- c("Ind", "X", "Y", colnames(moko_gendata1)[3:30])
end_line <- c("END", rep("", ncol(gen_lines) - 1))
spagedi <- rbind(header, first_line, second_line, third_line, gen_lines, end_line)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE)
write.table(spagedi, file = "Dropbox/postdoc/dispersal_papers/dispersal_review/data/refined_data/moko.spagedi.txt", quote = FALSE, col.names = FALSE, row.names = FALSE, sep = "\t")
View(spagedi)
0.000000000000001
install.packages('ReporteRs') # Install
install.packages('ReporteRs', lib = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library") # Install
library(genepop)
library(genepop)
# Packages  ####
library(dplyr)
library(tidyr)
library(ggplot2)
# Functions  ####
kinship_distance <- function(sample1, sample2) {
# First sample
one <- metadata[metadata$Individual == sample1,]
# Second sample
two <- metadata[metadata$Individual == sample2,]
pair <- rbind(one, two)
# distance
pair.dist <- dist(pair[,7:9])
return(pair.dist)
}
kinship_df <- function(kinship_txt, relation, taxa) {
df.length <- length(kinship_txt[,1])
dists <- data.frame(1:df.length)
for (i in 1:df.length) {
dists[i] <- as.numeric(kinship_distance(kinship_txt[i, 1],	kinship_txt[i, 2]))
}
kinship.df <- data.frame(Sample1 = kinship_txt[1:df.length, 1],
Sample2 = kinship_txt[1:df.length,2],
Status = rep(relation, df.length),
Taxa = c(rep(taxa, df.length)),
distances = t(dists)[1:df.length])
return(kinship.df)
}
kinship_plot <- function(kinship.df, max.dist, max.count, colours, width) {
ggplot(kinship.df, aes(distances, fill = Taxa)) +
geom_histogram(breaks = seq(0, max.dist, 1), colour = "black") +
theme_classic() + xlab(paste("distance between", unique(kinship.df$Status), "(m)")) + ylab("Frequency")  +
scale_fill_manual(values = colours) +
xlim(c(0, max.dist)) +
scale_y_continuous(limits = c(0, max.count), expand = c(0, 0), breaks = seq(0, max.count, 2)) +
theme(legend.position = "none")
status <- paste(unique(kinship.df$Status))
taxa <- paste0(unique(kinship.df$Taxa), collapse = "_")
ggsave(paste0("3c - Kinship/plots/", taxa, "_", status, "_distances.pdf"), height = 5, width = width, units = "cm")
}
# Set working directory
setwd("~/Dropbox/agaricia_project_2019/shalo_ag/gen_project/3 - Spatial/")
# Import data  ####
metadata <- read.csv('all_annotations_X_HORIZ_parallel_XYZadjusted.txt')
# aa1
parents.aa1 <-  read.table("3c - Kinship/Colony2_Mac_01_02_2022/aa1/Parents_aa1_1div_nc_50_0.2.txt", sep = ",",
header = TRUE)
FullSib.aa1 <-  read.table("3c - Kinship/Colony2_Mac_01_02_2022/aa1/FullSib_aa1_1div_nc_50_0.2.txt", sep = ",",
header = TRUE)
HalfSib.aa1 <-  read.table("3c - Kinship/Colony2_Mac_01_02_2022/aa1/HalfSib_aa1_1div_nc_50_0.2.txt", sep = ",",
header = TRUE)
pwd
setwd("~/Dropbox/agaricia_project_2019/shalo_ag/gen_project/popgen_rad_shallow_agaricia/E-intraspecific/scripts/")
# Import data  ####
metadata <- read.csv('../data/all_annotations_X_HORIZ_parallel_XYZadjusted.txt')
# Import data  ####
metadata <- read.csv('../data/all_annotations_X_HORIZ_parallel_XYZ_adjusted.txt')
# Import data  ####
metadata <- read.csv('../data/all_annotations_X_DEPTH_parallel_XYZ_adjusted.txt')
# aa1
kin.aa1 <-  read.table("../results/kinship/aa1-wp/aa1-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
View(kin.aa1)
# aa1
kin.aa1.wp <-  read.table("../results/kinship/aa1-wp/aa1-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
rm(kin.aa1)
# aa2 ####
kin.aa2.wp <- read.table("../results/kinship/aa2-wp/aa2-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# aa2 ####
kin.aa2.wp <- read.table("../results/kinship/aa2-wp/aa2-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
kin.aa2.ca <- read.table("../results/kinship/aa2-ca/aa2-ca_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
kin.aa2.sb <- read.table("../results/kinship/aa2-sb/aa2-sb_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
kin.aa2.sq <- read.table("../results/kinship/aa2-sq/aa2-sq_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
kinship_df(kin.aa1.wp[1:2,1:2], "Parent-Offspring", "AA1")
kin.aa1.wp[1:2,1:2]
kinship_distance(kin.aa1.wp[1:2,1]
kinship_distance(kin.aa1.wp[1:2,1])
kinship_distance(kin.aa1.wp[1:2,1])
kinship_distance(kin.aa1.wp[1,1], kin.aa1.wp[1,2])
metadata <- metadata %>% separate(Individual, into = c("Sample", "Species", "Site")) %>%
unite(Individual, Sample, Species, Site, remove = FALSE) %>%
dplyr::select(Individual, Sample, Species, Site, Loc, Depth, x, y, z)
View(metadata)
View(metadata)
kinship_distance(kin.aa1.wp[1,1], kin.aa1.wp[1,2])
kinship_df(kin.aa1.wp[1:2,1:2], "Parent-Offspring", "AA1")
View(kin.aa2.wp)
kinship_df(kin.aa1.wp[1:4,1:2], "Parent-Offspring", "AA2")
# Calculate distances ####
## Parent Off plots ####
aa1.parent.df <- kinship_df(kin.aa1.wp[1:2,1:2], "Parent-Offspring", "AA1")
kinship_df(kin.aa2.wp[1:4,1:2], "Parent-Offspring", "AA2")
# Calculate distances ####
## Parent Off plots ####
aa1.parent.df <- kinship_df(kin.aa1.wp[1:2,1:2], "Parent-Offspring", "AA1")
aa2.parent.df <- kinship_df(kin.aa2.wp[1:4,1:2], "Parent-Offspring", "AA2")
parents <- rbind(aa1.parent.df, aa2.parent.df)
kinship_plot(parents, max.dist = 5, max.count = 10, colours = colours[1:2], width = 5)
# Colours
#AA1        #AA2        #AH1       #AH2      #AH3      #AL1      #AL2
colours <- c("#274e13", "#8fce00", "#b06100", "#ffa500", "#ff4e00", "#6f0641", "#7223f0")
kinship_plot(parents, max.dist = 5, max.count = 10, colours = colours[1:2], width = 5)
kinship_plot <- function(kinship.df, max.dist, max.count, colours, width) {
ggplot(kinship.df, aes(distances, fill = Taxa)) +
geom_histogram(breaks = seq(0, max.dist, 1), colour = "black") +
theme_classic() + xlab(paste("distance between", unique(kinship.df$Status), "(m)")) + ylab("Frequency")  +
scale_fill_manual(values = colours) +
xlim(c(0, max.dist)) +
scale_y_continuous(limits = c(0, max.count), expand = c(0, 0), breaks = seq(0, max.count, 2)) +
theme(legend.position = "none")
status <- paste(unique(kinship.df$Status))
taxa <- paste0(unique(kinship.df$Taxa), collapse = "_")
ggsave(paste0("../results/kinship/", taxa, "_", status, "_distances.pdf"), height = 5, width = width, units = "cm")
}
kinship_plot(parents, max.dist = 5, max.count = 10, colours = colours[1:2], width = 5)
# ah ####
# ah1 - half/full
kin.ah1.ca <- read.table("../results/kinship/ah1-ca/ah1-ca_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
View(kin.ah1.ca)
# ah ####
# ah1 - half
kin.ah1.ca <- read.table("../results/kinship/ah1-ca/ah1-ca_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# ah2 - half
kin.ah2.wp <- read.table("../results/kinship/ah2-wp/ah2-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
kin.ah2.sb <- read.table("../results/kinship/ah2-sb/ah2-sb_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# ah3 - half
kin.ah3.wp <- read.table("../results/kinship/ah3-wp/ah3-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# ah3 - half
kin.ah3.wp <- read.table("../results/kinship/ah3-wp/ah3-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# Packages  ####
library(dplyr)
library(tidyr)
library(ggplot2)
# Functions  ####
kinship_distance <- function(sample1, sample2) {
# First sample
one <- metadata[metadata$Individual == sample1,]
# Second sample
two <- metadata[metadata$Individual == sample2,]
pair <- rbind(one, two)
# distance
pair.dist <- dist(pair[,7:9])
return(pair.dist)
}
kinship_df <- function(kinship_txt, relation, taxa) {
df.length <- length(kinship_txt[,1])
dists <- data.frame(1:df.length)
for (i in 1:df.length) {
dists[i] <- as.numeric(kinship_distance(kinship_txt[i, 1],	kinship_txt[i, 2]))
}
kinship.df <- data.frame(Sample1 = kinship_txt[1:df.length, 1],
Sample2 = kinship_txt[1:df.length,2],
Status = rep(relation, df.length),
Taxa = c(rep(taxa, df.length)),
distances = t(dists)[1:df.length])
return(kinship.df)
}
kinship_plot <- function(kinship.df, max.dist, max.count, colours, width) {
ggplot(kinship.df, aes(distances, fill = Taxa)) +
geom_histogram(breaks = seq(0, max.dist, 1), colour = "black") +
theme_classic() + xlab(paste("distance between", unique(kinship.df$Status), "(m)")) + ylab("Frequency")  +
scale_fill_manual(values = colours) +
xlim(c(0, max.dist)) +
scale_y_continuous(limits = c(0, max.count), expand = c(0, 0), breaks = seq(0, max.count, 2)) +
theme(legend.position = "none")
status <- paste(unique(kinship.df$Status))
taxa <- paste0(unique(kinship.df$Taxa), collapse = "_")
ggsave(paste0("../results/kinship/", taxa, "_", status, "_distances.pdf"), height = 5, width = width, units = "cm")
}
# Import data  ####
metadata <- read.csv('../data/all_annotations_X_DEPTH_parallel_XYZ_adjusted.txt')
# aa1
kin.aa1.wp <-  read.table("../results/kinship/aa1-wp/aa1-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# aa2 ####
kin.aa2.wp <- read.table("../results/kinship/aa2-wp/aa2-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
kin.aa2.ca <- read.table("../results/kinship/aa2-ca/aa2-ca_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
kin.aa2.sb <- read.table("../results/kinship/aa2-sb/aa2-sb_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
kin.aa2.sq <- read.table("../results/kinship/aa2-sq/aa2-sq_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# ah ####
# ah1 - half
kin.ah1.ca <- read.table("../results/kinship/ah1-ca/ah1-ca_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# ah2 - half
kin.ah2.wp <- read.table("../results/kinship/ah2-wp/ah2-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
kin.ah2.sb <- read.table("../results/kinship/ah2-sb/ah2-sb_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# ah3 - half
kin.ah3.wp <- read.table("../results/kinship/ah3-wp/ah3-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# Colours
#AA1        #AA2        #AH1       #AH2      #AH3      #AL1      #AL2
colours <- c("#274e13", "#8fce00", "#b06100", "#ffa500", "#ff4e00", "#6f0641", "#7223f0")
# Sort data  ####
metadata <- metadata %>% separate(Individual, into = c("Sample", "Species", "Site")) %>%
unite(Individual, Sample, Species, Site, remove = FALSE) %>%
dplyr::select(Individual, Sample, Species, Site, Loc, Depth, x, y, z)
# Calculate distances ####
## Parent Off plots ####
aa1.parent.df <- kinship_df(kin.aa1.wp[1:2,1:2], "Parent-Offspring", "AA1")
aa2.parent.df <- kinship_df(kin.aa2.wp[1:4,1:2], "Parent-Offspring", "AA2")
parents <- rbind(aa1.parent.df, aa2.parent.df)
kinship_plot(parents, max.dist = 5, max.count = 10, colours = colours[1:2], width = 5)
kin.aa1.wp
kin.aa1.wp[kin.aa1.wp[,3]=="FS"]
kin.aa1.wp[,3]
kin.aa1.wp[,kin.aa1.wp[,3]=="FS"]
kin.aa1.wp[1:2,kin.aa1.wp[,3] == "FS"]
View(kin.aa1.wp)
## Full sib plots ####
aa1.fullsib.df <- kinship_df(kin.aa1.wp[1:2,]$Relationship == "FS")
kin.aa1.wp[1:2,]$Relationship == "FS"
kin.aa1.wp[,1:2]$Relationship == "FS"
kin.aa1.wp$Relationship == "FS"
kin.aa1.wp$Relationship == "FS"[,1:2]
kin.aa1.wp$Relationship == "FS"
kin.aa1.wp[kin.aa1.wp$Relationship == "FS"]
kin.aa1.wp[,kin.aa1.wp$Relationship == "FS"]
## Full sib plots ####
aa1.fullsib.df <- kinship_df(kin.aa1.wp[3,1:2])
kin.aa1.wp[3,1:2]
## Full sib plots ####
aa1.fullsib.df <- kinship_df(kin.aa1.wp[3,1:2], "Full-siblings", "AA1")
View(kin.aa1.wp)
kin.aa2.wp
kin.aa2.wp[,1:2]
kin.aa2.wp[kin.aa2.wp$Relationship == "FS"]
kin.aa2.wp[kin.aa2.wp$Relationship == "FS",]
kin.aa2.wp[kin.aa2.wp$Relationship == "FS",1]
kin.aa2.wp[kin.aa2.wp$Relationship == "FS",1:2]
aa2.wp.fullsib.df <- kinship_df(kin.aa2.wp[kin.aa2.wp$Relationship == "FS",1:2], "Full-siblings", "AA2")
aa2.ca.fullsib.df <- kinship_df(kin.aa2.ca[kin.aa2.ca$Relationship == "FS",1:2], "Full-siblings", "AA2")
aa2.sb.fullsib.df <- kinship_df(kin.aa2.sb[kin.aa2.sb$Relationship == "FS",1:2], "Full-siblings", "AA2")
aa2.sq.fullsib.df <- kinship_df(kin.aa2.sq[kin.aa2.sq$Relationship == "FS",1:2], "Full-siblings", "AA2")
ah1.fullsib.df <- kinship_df(FullSib.ah1, "Full-siblings", "AH1")
View(aa1.fullsib.df)
## Full sib plots ####
aa1.fullsib.df <- kinship_df(kin.aa1.wp[kin.aa1.wp$Relationship == "FS",1:2], "Full-siblings", "AA1")
aa2.wp.fullsib.df <- kinship_df(kin.aa2.wp[kin.aa2.wp$Relationship == "FS",1:2], "Full-siblings", "AA2")
aa2.ca.fullsib.df <- kinship_df(kin.aa2.ca[kin.aa2.ca$Relationship == "FS",1:2], "Full-siblings", "AA2")
aa2.sb.fullsib.df <- kinship_df(kin.aa2.sb[kin.aa2.sb$Relationship == "FS",1:2], "Full-siblings", "AA2")
aa2.sq.fullsib.df <- kinship_df(kin.aa2.sq[kin.aa2.sq$Relationship == "FS",1:2], "Full-siblings", "AA2")
fullsibs <- rbind(aa1.fullsib.df, aa2.ca.fullsib.df, aa2.sb.fullsib.df, aa2.sq.fullsib.df, aa2.wp.fullsib.df)
#fullsibs <- na.omit(fullsibs)
kinship_plot(fullsibs, max.dist = 30, max.count = 10, colours = colours[c(2,4)], width = 10)
## Half-sib plots ####
aa1.halfsib.df <- kinship_df(kin.aa1.wp[kin.aa1.wp$Relationship == "HS",1:2])
## Half-sib plots ####
aa1.halfsib.df <- kinship_df(kin.aa1.wp[kin.aa1.wp$Relationship == "HS",1:2], "Half-siblings", "AA2")
View(kin.aa1.wp)
[kin.aa1.wp$Relationship == "HS",1:2]
View(aa1.halfsib.df)
View(aa1.fullsib.df)
## Half-sib plots ####
aa1.halfsib.df <- kinship_df(kin.aa1.wp[kin.aa1.wp$Relationship == "HS",1:2], "Half-siblings", "AA2")
aa2.wp.halfsib.df <- kinship_df(kin.aa2.wp[kin.aa2.wp$Relationship == "HS",1:2], "Half-siblings", "AA2")
aa2.ca.halfsib.df <- kinship_df(kin.aa2.ca[kin.aa2.ca$Relationship == "HS",1:2], "Half-siblings", "AA2")
aa2.sb.halfsib.df <- kinship_df(kin.aa2.sb[kin.aa2.sb$Relationship == "HS",1:2], "Half-siblings", "AA2")
aa2.sq.halfsib.df <- kinship_df(kin.aa2.sq[kin.aa2.sq$Relationship == "HS",1:2], "Half-siblings", "AA2")
ah1.halfsib.df <- kinship_df(kin.ah1.ca[kin.ah1.ca$Relationship == "HS",1:2], "Half-siblings", "AH1")
ah2.wp.halfsib.df <- kinship_df(kin.ah2.wp[kin.ah2.wp$Relationship == "HS",1:2], "Half-siblings", "AH2")
ah2.sb.halfsib.df <- kinship_df(kin.ah2.sb[kin.ah2.sb$Relationship == "HS",1:2], "Half-siblings", "AH2")
ah3.halfsib.df <- kinship_df(kin.ah3.wp[kin.ah3.wp$Relationship == "HS",1:2], "Half-siblings", "AH3")
halfsibs <- rbind(aa1.halfsib.df, aa2.ca.halfsib.df, aa2.sb.halfsib.df, aa2.sq.halfsib.df, aa2.wp.halfsib.df, ah1.halfsib.df,
ah2.wp.halfsib.df, ah2.sb.halfsib.df, ah3.halfsib.df)
#halfsibs <- na.omit(halfsibs)
kinship_plot(halfsibs, max.dist = 30, max.count = 10, colours = colours[1:4], width = 10)
## Half-sib plots ####
aa1.halfsib.df <- kinship_df(kin.aa1.wp[kin.aa1.wp$Relationship == "HS",1:2], "Half-siblings", "AA1")
aa2.wp.halfsib.df <- kinship_df(kin.aa2.wp[kin.aa2.wp$Relationship == "HS",1:2], "Half-siblings", "AA2")
aa2.ca.halfsib.df <- kinship_df(kin.aa2.ca[kin.aa2.ca$Relationship == "HS",1:2], "Half-siblings", "AA2")
aa2.sb.halfsib.df <- kinship_df(kin.aa2.sb[kin.aa2.sb$Relationship == "HS",1:2], "Half-siblings", "AA2")
aa2.sq.halfsib.df <- kinship_df(kin.aa2.sq[kin.aa2.sq$Relationship == "HS",1:2], "Half-siblings", "AA2")
ah1.halfsib.df <- kinship_df(kin.ah1.ca[kin.ah1.ca$Relationship == "HS",1:2], "Half-siblings", "AH1")
ah2.wp.halfsib.df <- kinship_df(kin.ah2.wp[kin.ah2.wp$Relationship == "HS",1:2], "Half-siblings", "AH2")
ah2.sb.halfsib.df <- kinship_df(kin.ah2.sb[kin.ah2.sb$Relationship == "HS",1:2], "Half-siblings", "AH2")
ah3.halfsib.df <- kinship_df(kin.ah3.wp[kin.ah3.wp$Relationship == "HS",1:2], "Half-siblings", "AH3")
halfsibs <- rbind(aa1.halfsib.df, aa2.ca.halfsib.df, aa2.sb.halfsib.df, aa2.sq.halfsib.df, aa2.wp.halfsib.df, ah1.halfsib.df,
ah2.wp.halfsib.df, ah2.sb.halfsib.df, ah3.halfsib.df)
#halfsibs <- na.omit(halfsibs)
kinship_plot(halfsibs, max.dist = 30, max.count = 10, colours = colours[1:4], width = 10)
#halfsibs <- na.omit(halfsibs)
kinship_plot(halfsibs, max.dist = 30, max.count = 10, colours = colours[2:4], width = 10)
View(halfsibs)
#halfsibs <- na.omit(halfsibs)
kinship_plot(halfsibs, max.dist = 30, max.count = 10, colours = colours[1:3], width = 10)
## Full sib plots ####
aa1.fullsib.df <- kinship_df(kin.aa1.wp[kin.aa1.wp$Relationship == "FS",1:2], "Full-siblings", "AA1")
aa2.wp.fullsib.df <- kinship_df(kin.aa2.wp[kin.aa2.wp$Relationship == "FS",1:2], "Full-siblings", "AA2")
aa2.ca.fullsib.df <- kinship_df(kin.aa2.ca[kin.aa2.ca$Relationship == "FS",1:2], "Full-siblings", "AA2")
aa2.sb.fullsib.df <- kinship_df(kin.aa2.sb[kin.aa2.sb$Relationship == "FS",1:2], "Full-siblings", "AA2")
aa2.sq.fullsib.df <- kinship_df(kin.aa2.sq[kin.aa2.sq$Relationship == "FS",1:2], "Full-siblings", "AA2")
fullsibs <- rbind(aa1.fullsib.df, aa2.ca.fullsib.df, aa2.sb.fullsib.df, aa2.sq.fullsib.df, aa2.wp.fullsib.df)
fullsibs.o <- na.omit(fullsibs)
kinship_plot(fullsibs.o, max.dist = 30, max.count = 10, colours = colours[c(2,4)], width = 10)
# Packages  ####
library(dplyr)
library(tidyr)
library(ggplot2)
# Functions  ####
kinship_distance <- function(sample1, sample2) {
# First sample
one <- metadata[metadata$Individual == sample1,]
# Second sample
two <- metadata[metadata$Individual == sample2,]
pair <- rbind(one, two)
# distance
pair.dist <- dist(pair[,7:9])
return(pair.dist)
}
kinship_df <- function(kinship_txt, relation, taxa) {
df.length <- length(kinship_txt[,1])
dists <- data.frame(1:df.length)
for (i in 1:df.length) {
dists[i] <- as.numeric(kinship_distance(kinship_txt[i, 1],	kinship_txt[i, 2]))
}
kinship.df <- data.frame(Sample1 = kinship_txt[1:df.length, 1],
Sample2 = kinship_txt[1:df.length,2],
Status = rep(relation, df.length),
Taxa = c(rep(taxa, df.length)),
distances = t(dists)[1:df.length])
return(kinship.df)
}
kinship_plot <- function(kinship.df, max.dist, max.count, colours, width) {
ggplot(kinship.df, aes(distances, fill = Taxa)) +
geom_histogram(breaks = seq(0, max.dist, 1), colour = "black") +
theme_classic() + xlab(paste("distance between", unique(kinship.df$Status), "(m)")) + ylab("Frequency")  +
scale_fill_manual(values = colours) +
xlim(c(0, max.dist)) +
scale_y_continuous(limits = c(0, max.count), expand = c(0, 0), breaks = seq(0, max.count, 2)) +
theme(legend.position = "none")
status <- paste(unique(kinship.df$Status))
taxa <- paste0(unique(kinship.df$Taxa), collapse = "_")
ggsave(paste0("../results/kinship/", taxa, "_", status, "_distances.pdf"), height = 5, width = width, units = "cm")
}
# Import data  ####
metadata <- read.csv('../data/all_annotations_X_DEPTH_parallel_XYZ_adjusted.txt')
# aa1
kin.aa1.wp <-  read.table("../results/kinship/aa1-wp/aa1-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# aa2 ####
kin.aa2.wp <- read.table("../results/kinship/aa2-wp/aa2-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
kin.aa2.ca <- read.table("../results/kinship/aa2-ca/aa2-ca_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
kin.aa2.sb <- read.table("../results/kinship/aa2-sb/aa2-sb_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
kin.aa2.sq <- read.table("../results/kinship/aa2-sq/aa2-sq_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# ah ####
# ah1 - half
kin.ah1.ca <- read.table("../results/kinship/ah1-ca/ah1-ca_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# ah2 - half
kin.ah2.wp <- read.table("../results/kinship/ah2-wp/ah2-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
kin.ah2.sb <- read.table("../results/kinship/ah2-sb/ah2-sb_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# ah3 - half
kin.ah3.wp <- read.table("../results/kinship/ah3-wp/ah3-wp_1div_nc_20_0.2.kin.txt", sep = ",",
header = TRUE)
# Colours
#AA1        #AA2        #AH1       #AH2      #AH3      #AL1      #AL2
colours <- c("#274e13", "#8fce00", "#b06100", "#ffa500", "#ff4e00", "#6f0641", "#7223f0")
# Sort data  ####
metadata <- metadata %>% separate(Individual, into = c("Sample", "Species", "Site")) %>%
unite(Individual, Sample, Species, Site, remove = FALSE) %>%
dplyr::select(Individual, Sample, Species, Site, Loc, Depth, x, y, z)
# Calculate distances ####
## Parent Off plots ####
aa1.parent.df <- kinship_df(kin.aa1.wp[1:2,1:2], "Parent-Offspring", "AA1")
aa2.parent.df <- kinship_df(kin.aa2.wp[1:4,1:2], "Parent-Offspring", "AA2")
parents <- rbind(aa1.parent.df, aa2.parent.df)
kinship_plot(parents, max.dist = 5, max.count = 10, colours = colours[1:2], width = 5)
## Full sib plots ####
aa1.fullsib.df <- kinship_df(kin.aa1.wp[kin.aa1.wp$Relationship == "FS",1:2], "Full-siblings", "AA1")
aa2.wp.fullsib.df <- kinship_df(kin.aa2.wp[kin.aa2.wp$Relationship == "FS",1:2], "Full-siblings", "AA2")
aa2.ca.fullsib.df <- kinship_df(kin.aa2.ca[kin.aa2.ca$Relationship == "FS",1:2], "Full-siblings", "AA2")
aa2.sb.fullsib.df <- kinship_df(kin.aa2.sb[kin.aa2.sb$Relationship == "FS",1:2], "Full-siblings", "AA2")
aa2.sq.fullsib.df <- kinship_df(kin.aa2.sq[kin.aa2.sq$Relationship == "FS",1:2], "Full-siblings", "AA2")
fullsibs <- rbind(aa1.fullsib.df, aa2.ca.fullsib.df, aa2.sb.fullsib.df, aa2.sq.fullsib.df, aa2.wp.fullsib.df)
fullsibs.o <- na.omit(fullsibs)
kinship_plot(fullsibs.o, max.dist = 30, max.count = 10, colours = colours[c(2,4)], width = 10)
## Half-sib plots ####
aa1.halfsib.df <- kinship_df(kin.aa1.wp[kin.aa1.wp$Relationship == "HS",1:2], "Half-siblings", "AA1")
aa2.wp.halfsib.df <- kinship_df(kin.aa2.wp[kin.aa2.wp$Relationship == "HS",1:2], "Half-siblings", "AA2")
aa2.ca.halfsib.df <- kinship_df(kin.aa2.ca[kin.aa2.ca$Relationship == "HS",1:2], "Half-siblings", "AA2")
aa2.sb.halfsib.df <- kinship_df(kin.aa2.sb[kin.aa2.sb$Relationship == "HS",1:2], "Half-siblings", "AA2")
aa2.sq.halfsib.df <- kinship_df(kin.aa2.sq[kin.aa2.sq$Relationship == "HS",1:2], "Half-siblings", "AA2")
ah1.halfsib.df <- kinship_df(kin.ah1.ca[kin.ah1.ca$Relationship == "HS",1:2], "Half-siblings", "AH1")
ah2.wp.halfsib.df <- kinship_df(kin.ah2.wp[kin.ah2.wp$Relationship == "HS",1:2], "Half-siblings", "AH2")
ah2.sb.halfsib.df <- kinship_df(kin.ah2.sb[kin.ah2.sb$Relationship == "HS",1:2], "Half-siblings", "AH2")
ah3.halfsib.df <- kinship_df(kin.ah3.wp[kin.ah3.wp$Relationship == "HS",1:2], "Half-siblings", "AH3")
halfsibs <- rbind(aa1.halfsib.df, aa2.ca.halfsib.df, aa2.sb.halfsib.df, aa2.sq.halfsib.df, aa2.wp.halfsib.df, ah1.halfsib.df,
ah2.wp.halfsib.df, ah2.sb.halfsib.df, ah3.halfsib.df)
halfsibs.o <- na.omit(halfsibs)
kinship_plot(halfsibs.o, max.dist = 30, max.count = 10, colours = colours[1:3], width = 10)
kinship_plot(halfsibs.o, max.dist = 30, max.count = 10, colours = colours[1:4], width = 10)
View(fullsibs)
View(parents)
View(kin.aa1.wp)
View(kin.aa2.wp)
str(kin.aa2.wp)
kin.aa1.wp$Relationship <- as.factor(kin.aa1.wp$Relationship)
str(kin.aa1.wp$Relationship)
summary(kin.aa1.wp$Relationship)
summary(kin.aa2.wp$Relationship)
kin.aa2.wp$Relationship <- as.factor(kin.aa2.wp$Relationship)
summary(kin.aa2.wp$Relationship)
kin.aa2.ca$Relationship <- as.factor(kin.aa2.ca$Relationship)
summary(kin.aa2.ca$Relationship)
kin.aa2.sb$Relationship <- as.factor(kin.aa2.sb$Relationship)
summary(kin.aa2.sb$Relationship)
summary(kin.aa2.sq$Relationship)
kin.aa2.sq$Relationship <- as.factor(kin.aa2.sq$Relationship)
summary(kin.aa2.sq$Relationship)
